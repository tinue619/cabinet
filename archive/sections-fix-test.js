/**
 * –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –°–ï–ö–¶–ò–ô
 * Domain Layer - Testing Fixed Section Geometry
 */

console.log('üîß Testing FIXED sections...');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
import('../../new_core/index.js')
    .then(coreModule => {
        console.log('‚úÖ Core module loaded:', coreModule);
        
        const { SystemFactory } = coreModule;
        
        // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        console.log('üè≠ Creating system with validation...');
        const system = SystemFactory.create({
            enableEvents: true,
            enableValidation: true, // –í–ö–õ–Æ–ß–ê–ï–ú –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ
            debugMode: true
        });
        
        console.log('‚úÖ System created:', system);
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã  
        console.log('üß± Creating materials...');
        const ldsp16 = system.createLDSP16();
        const hdf3 = system.createHDF3();
        const mdf16 = system.createMDF16();
        
        console.log('‚úÖ Materials created:', {
            ldsp16: ldsp16.name,
            hdf3: hdf3.name, 
            mdf16: mdf16.name
        });
        
        // –°–æ–∑–¥–∞–µ–º —à–∫–∞—Ñ
        console.log('üèóÔ∏è Creating cabinet...');
        const cabinet = system.createCabinet({
            width: 800,
            height: 2000,
            depth: 600,
            baseHeight: 100
        });
        
        console.log('‚úÖ Cabinet created:', cabinet);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –í–°–Å - –≤–∫–ª—é—á–∞—è —Å–µ–∫—Ü–∏–∏!
        console.log('‚öôÔ∏è Generating FULL cabinet with sections...');
        try {
            // –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            cabinet.generate();
            
            console.log('üéâ FULL cabinet generation SUCCESSFUL!');
            console.log('üìä Cabinet stats:', cabinet.getStats());
            
        } catch (error) {
            console.error('‚ùå CABINET GENERATION FAILED:', error);
            console.error('üìä Stack trace:', error.stack);
            
            // Fallback –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            console.log('üîÑ Falling back to simplified generation...');
            try {
                cabinet._createMaterials();
                cabinet._createRequiredPanels();
                cabinet._establishPanelConnections();
                console.log('‚úÖ Simplified generation successful');
            } catch (fallbackError) {
                console.error('‚ùå Even simplified generation failed:', fallbackError);
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        const cabinetData = {
            dimensions: cabinet.dimensions,
            panels: cabinet.getPanels(),
            sections: cabinet.getSections(),
            stats: {
                panelsCount: cabinet.getPanels().length,
                sectionsCount: cabinet.getSections().length,
                volume: (cabinet.dimensions.width * cabinet.dimensions.height * cabinet.dimensions.depth) / 1000000000
            }
        };
        
        console.log('üìä Final cabinet data:', cabinetData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        if (cabinetData.sections.length > 0) {
            console.log('üéØ SECTIONS CREATED SUCCESSFULLY!');
            console.log('üìê Section details:');
            cabinetData.sections.forEach((section, index) => {
                console.log(`  Section ${index + 1}:`, section.bounds);
            });
            
            // –ü–æ–ª–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å —Å–µ–∫—Ü–∏—è–º–∏
            drawFullCabinetOnCanvas(cabinetData);
        } else {
            console.log('‚ö†Ô∏è No sections created, drawing simplified version');
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–µ–∑ —Å–µ–∫—Ü–∏–π
            drawSimplifiedCabinetOnCanvas(cabinetData);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateCabinetInfo(cabinetData);
        
        // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        const eventType = cabinetData.sections.length > 0 ? 'cabinet-sections-working' : 'cabinet-sections-failed';
        window.dispatchEvent(new CustomEvent(eventType, {
            detail: { 
                message: cabinetData.sections.length > 0 
                    ? 'Sections fix successful!'
                    : 'Sections still not working',
                cabinet: cabinetData,
                sectionsWorking: cabinetData.sections.length > 0
            }
        }));
        
    })
    .catch(error => {
        console.error('‚ùå SECTIONS FIX TEST FAILED:', error);
        
        window.dispatchEvent(new CustomEvent('cabinet-sections-failed', {
            detail: { 
                message: `Sections fix test failed: ${error.message}`,
                stack: error.stack
            }
        }));
    });

/**
 * üé® –ü–û–õ–ù–ê–Ø –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–∫–∞—Ñ–∞ –Ω–∞ Canvas (–° —Å–µ–∫—Ü–∏—è–º–∏!)
 * UI Layer - Complete Rendering
 */
function drawFullCabinetOnCanvas(cabinetData) {
    console.log('üé® Drawing FULL cabinet with sections on canvas...');
    
    const canvas = document.getElementById('cabinet-canvas');
    if (!canvas) {
        console.error('‚ùå Canvas not found');
        return;
    }
    
    const ctx = canvas.getContext('2d');
    if (!ctx) {
        console.error('‚ùå Canvas context not found');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
    canvas.width = 800;
    canvas.height = 600;
    
    if (!cabinetData.dimensions) {
        console.error('‚ùå No cabinet dimensions');
        return;
    }
    
    const dims = cabinetData.dimensions;
    
    // –ú–∞—Å—à—Ç–∞–± –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const scale = Math.min(700 / dims.width, 500 / dims.height);
    const offsetX = (canvas.width - dims.width * scale) / 2;
    const offsetY = (canvas.height - dims.height * scale) / 2;
    
    // 1. –†–∏—Å—É–µ–º –æ–±—â–∏–π –∫–æ–Ω—Ç—É—Ä —à–∫–∞—Ñ–∞
    ctx.fillStyle = '#f5f5f5';
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 2;
    
    const cabinetWidth = dims.width * scale;
    const cabinetHeight = dims.height * scale;
    
    ctx.fillRect(offsetX, offsetY, cabinetWidth, cabinetHeight);
    ctx.strokeRect(offsetX, offsetY, cabinetWidth, cabinetHeight);
    
    // 2. –†–∏—Å—É–µ–º —Å–µ–∫—Ü–∏–∏ (–≥–ª–∞–≤–Ω–∞—è —Ñ–∏—á–∞!)
    ctx.fillStyle = 'rgba(100, 200, 100, 0.3)';
    ctx.strokeStyle = '#006600';
    ctx.lineWidth = 2;
    
    if (cabinetData.sections && cabinetData.sections.length > 0) {
        cabinetData.sections.forEach((section, index) => {
            if (section.bounds) {
                const bounds = section.bounds;
                const sectionX = offsetX + bounds.left * scale;
                const sectionY = offsetY + (dims.height - bounds.bottom) * scale; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y
                const sectionW = (bounds.right - bounds.left) * scale;
                const sectionH = (bounds.bottom - bounds.top) * scale;
                
                ctx.fillRect(sectionX, sectionY, sectionW, sectionH);
                ctx.strokeRect(sectionX, sectionY, sectionW, sectionH);
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
                ctx.fillStyle = '#006600';
                ctx.font = '12px Arial bold';
                ctx.fillText(`–°–µ–∫—Ü–∏—è ${index + 1}`, sectionX + 5, sectionY + 20);
                ctx.fillText(`${Math.round(bounds.width)}√ó${Math.round(bounds.height)}–º–º`, sectionX + 5, sectionY + 35);
                ctx.fillStyle = 'rgba(100, 200, 100, 0.3)';
            }
        });
    }
    
    // 3. –ó–∞–≥–æ–ª–æ–≤–æ–∫
    ctx.fillStyle = '#333';
    ctx.font = '16px Arial bold';
    const title = cabinetData.sections.length > 0 
        ? `‚úÖ –°–ï–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢! ${dims.width}√ó${dims.height}√ó${dims.depth}–º–º`
        : `‚ùå –°–µ–∫—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç ${dims.width}√ó${dims.height}√ó${dims.depth}–º–º`;
    ctx.fillText(title, offsetX, offsetY - 20);
    
    ctx.font = '12px Arial';
    const subtitle = `${cabinetData.stats.panelsCount} –ø–∞–Ω–µ–ª–µ–π, ${cabinetData.stats.sectionsCount} —Å–µ–∫—Ü–∏–π`;
    ctx.fillText(subtitle, offsetX, offsetY - 5);
    
    console.log('‚úÖ Cabinet drawn with sections status!');
}

/**
 * üé® –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–∫–∞—Ñ–∞ –Ω–∞ Canvas (–ë–ï–ó —Å–µ–∫—Ü–∏–π)
 * UI Layer - Fallback Rendering
 */
function drawSimplifiedCabinetOnCanvas(cabinetData) {
    console.log('üé® Drawing simplified cabinet on canvas...');
    
    const canvas = document.getElementById('cabinet-canvas');
    if (!canvas) {
        console.error('‚ùå Canvas not found');
        return;
    }
    
    const ctx = canvas.getContext('2d');
    if (!ctx) {
        console.error('‚ùå Canvas context not found');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
    canvas.width = 800;
    canvas.height = 600;
    
    if (!cabinetData.dimensions) {
        console.error('‚ùå No cabinet dimensions');
        return;
    }
    
    const dims = cabinetData.dimensions;
    
    // –ú–∞—Å—à—Ç–∞–± –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const scale = Math.min(700 / dims.width, 500 / dims.height);
    const offsetX = (canvas.width - dims.width * scale) / 2;
    const offsetY = (canvas.height - dims.height * scale) / 2;
    
    // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –∫–æ–Ω—Ç—É—Ä —à–∫–∞—Ñ–∞
    ctx.fillStyle = '#f0f0f0';
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 2;
    
    const cabinetWidth = dims.width * scale;
    const cabinetHeight = dims.height * scale;
    
    ctx.fillRect(offsetX, offsetY, cabinetWidth, cabinetHeight);
    ctx.strokeRect(offsetX, offsetY, cabinetWidth, cabinetHeight);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    ctx.fillStyle = '#333';
    ctx.font = '16px Arial';
    ctx.fillText(`‚ùå –°–µ–∫—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç ${dims.width}√ó${dims.height}√ó${dims.depth}–º–º`, offsetX, offsetY - 20);
    ctx.fillText(`(${cabinetData.stats.panelsCount} –ø–∞–Ω–µ–ª–µ–π, —Å–µ–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã)`, offsetX, offsetY - 5);
    
    console.log('‚úÖ Simplified cabinet drawn on canvas');
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–∞—Ñ–µ –≤ UI
 */
function updateCabinetInfo(cabinetData) {
    console.log('üìã Updating cabinet info...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statVolume = document.getElementById('stat-volume');
    const statPanels = document.getElementById('stat-panels');
    const statSections = document.getElementById('stat-sections');
    
    if (statVolume && cabinetData.stats) {
        const volume = (cabinetData.stats.volume || 0).toFixed(3);
        statVolume.textContent = `${volume} –º¬≥`;
    }
    
    if (statPanels && cabinetData.stats) {
        statPanels.textContent = cabinetData.stats.panelsCount || 0;
    }
    
    if (statSections && cabinetData.stats) {
        const sectionsText = cabinetData.stats.sectionsCount > 0 
            ? `${cabinetData.stats.sectionsCount} ‚úÖ`
            : `${cabinetData.stats.sectionsCount} ‚ùå`;
        statSections.textContent = sectionsText;
    }
    
    console.log('‚úÖ Cabinet info updated');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export default {
    name: 'Sections Fix Test',
    version: '1.0-fix-test'
};
