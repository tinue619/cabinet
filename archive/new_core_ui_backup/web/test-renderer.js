// üß™ –¢–ï–°–¢ –†–ï–ù–î–ï–†–ï–†–ê 2D
// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –Ω–æ–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ —Å —è–¥—Ä–æ–º v3.1

"use strict";

import { quickStart } from '../index.js';
import { Renderer2D } from '../systems/Renderer2D.js';

console.log('üß™ Starting Renderer2D Tests...');
console.log('==========================================');

try {
    // üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüöÄ Test 1: System Initialization');
    const result = quickStart();
    console.log('‚úÖ System created:', result.system.id);
    console.log('‚úÖ Cabinet created:', result.cabinet.id);
    console.log('‚úÖ Cabinet stats:', result.cabinet.getStats());
    
    // üé® –°–æ–∑–¥–∞–Ω–∏–µ Canvas —ç–ª–µ–º–µ–Ω—Ç–∞
    console.log('\nüé® Test 2: Canvas Setup');
    
    // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testHTML = `
    <!DOCTYPE html>
    <html>
    <head>
        <title>Renderer2D Test</title>
        <style>
            body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
            .container { display: flex; gap: 20px; height: 80vh; }
            .canvas-container { flex: 1; border: 2px solid #ccc; position: relative; }
            .controls { width: 300px; padding: 20px; background: #f5f5f5; }
            canvas { width: 100%; height: 100%; }
            button { margin: 5px 0; padding: 10px; width: 100%; }
        </style>
    </head>
    <body>
        <h1>üé® Renderer2D Test</h1>
        <div class="container">
            <div class="canvas-container">
                <canvas id="cabinet-canvas"></canvas>
            </div>
            <div class="controls">
                <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
                <button id="toggle-dimensions">üìè –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã</button>
                <button id="toggle-sections">üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏–∏</button>
                <button id="toggle-panels">üìê –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª–∏</button>
                <button id="reset-scale">üîÑ –°–±—Ä–æ—Å–∏—Ç—å –º–∞—Å—à—Ç–∞–±</button>
                <button id="new-cabinet">üèóÔ∏è –ù–æ–≤—ã–π —à–∫–∞—Ñ</button>
                
                <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                <div id="info">
                    <p><strong>–®–∫–∞—Ñ:</strong> ${result.cabinet.dimensions.width}√ó${result.cabinet.dimensions.height}√ó${result.cabinet.dimensions.depth}</p>
                    <p><strong>–ü–∞–Ω–µ–ª–µ–π:</strong> ${result.cabinet.getStats().panelsCount}</p>
                    <p><strong>–°–µ–∫—Ü–∏–π:</strong> ${result.cabinet.getStats().sectionsCount}</p>
                </div>
                
                <h4>–û—Ç–ª–∞–¥–∫–∞</h4>
                <div id="debug"></div>
            </div>
        </div>
        
        <script type="module">
            import { quickStart } from './index.js';
            import { Renderer2D } from './systems/Renderer2D.js';
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            const result = quickStart();
            const canvas = document.getElementById('cabinet-canvas');
            const renderer = new Renderer2D(canvas, result.system);
            
            // –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
            renderer.init();
            renderer.setCabinet(result.cabinet);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            document.getElementById('toggle-dimensions').onclick = () => {
                const current = renderer.renderOptions.showDimensions;
                renderer.showDimensions(!current);
                updateDebugInfo();
            };
            
            document.getElementById('toggle-sections').onclick = () => {
                const current = renderer.renderOptions.showSections;
                renderer.setRenderOptions({ showSections: !current });
                updateDebugInfo();
            };
            
            document.getElementById('toggle-panels').onclick = () => {
                const current = renderer.renderOptions.showPanels;
                renderer.setRenderOptions({ showPanels: !current });
                updateDebugInfo();
            };
            
            document.getElementById('reset-scale').onclick = () => {
                renderer.resetScale();
                updateDebugInfo();
            };
            
            document.getElementById('new-cabinet').onclick = () => {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∫–∞—Ñ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
                const width = 600 + Math.random() * 400;
                const height = 1800 + Math.random() * 400;
                const depth = 400 + Math.random() * 300;
                
                const newCabinet = result.system.createCabinet({
                    width: Math.round(width),
                    height: Math.round(height),
                    depth: Math.round(depth),
                    baseHeight: 100
                });
                
                newCabinet.generate();
                renderer.setCabinet(newCabinet);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                document.getElementById('info').innerHTML = \`
                    <p><strong>–®–∫–∞—Ñ:</strong> \${newCabinet.dimensions.width}√ó\${newCabinet.dimensions.height}√ó\${newCabinet.dimensions.depth}</p>
                    <p><strong>–ü–∞–Ω–µ–ª–µ–π:</strong> \${newCabinet.getStats().panelsCount}</p>
                    <p><strong>–°–µ–∫—Ü–∏–π:</strong> \${newCabinet.getStats().sectionsCount}</p>
                \`;
                updateDebugInfo();
            };
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            function updateDebugInfo() {
                const debugInfo = renderer.getDebugInfo();
                document.getElementById('debug').innerHTML = \`
                    <p><strong>–ú–∞—Å—à—Ç–∞–±:</strong> \${debugInfo.transform.scale.toFixed(2)}</p>
                    <p><strong>–†–∞–∑–º–µ—Ä—ã:</strong> \${debugInfo.renderOptions.showDimensions ? '–î–∞' : '–ù–µ—Ç'}</p>
                    <p><strong>–°–µ–∫—Ü–∏–∏:</strong> \${debugInfo.renderOptions.showSections ? '–î–∞' : '–ù–µ—Ç'}</p>
                    <p><strong>–ü–∞–Ω–µ–ª–∏:</strong> \${debugInfo.renderOptions.showPanels ? '–î–∞' : '–ù–µ—Ç'}</p>
                \`;
            }
            
            // –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            updateDebugInfo();
            
            console.log('‚úÖ Renderer2D Test UI loaded');
        </script>
    </body>
    </html>
    `;
    
    console.log('‚úÖ HTML test page generated');
    console.log('üìÅ Save this as test-renderer.html and open in browser');
    
    // üéØ –¢–µ—Å—Ç API —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    console.log('\nüéØ Test 3: Renderer API');
    
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π canvas –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testCanvas = {
        getContext: () => ({
            scale: () => {},
            clearRect: () => {},
            fillRect: () => {},
            strokeRect: () => {},
            fillText: () => {},
            save: () => {},
            restore: () => {},
            translate: () => {},
            rotate: () => {},
            setLineDash: () => {}
        }),
        addEventListener: () => {},
        getBoundingClientRect: () => ({
            width: 800,
            height: 600,
            left: 0,
            top: 0
        }),
        parentElement: {
            getBoundingClientRect: () => ({
                width: 800,
                height: 600
            })
        },
        width: 800,
        height: 600,
        style: {}
    };
    
    const renderer = new Renderer2D(testCanvas, result.system);
    console.log('‚úÖ Renderer created');
    
    renderer.init();
    console.log('‚úÖ Renderer initialized');
    
    renderer.setCabinet(result.cabinet);
    console.log('‚úÖ Cabinet set');
    
    renderer.showDimensions(true);
    console.log('‚úÖ Dimensions enabled');
    
    const debugInfo = renderer.getDebugInfo();
    console.log('‚úÖ Debug info:', {
        hasCabinet: debugInfo.hasCabinet,
        canvasSize: debugInfo.canvasSize,
        renderOptions: debugInfo.renderOptions
    });
    
    // üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüéØ FINAL REPORT');
    console.log('==========================================');
    console.log('‚úÖ Renderer2D successfully integrated!');
    console.log('‚úÖ All tests passed');
    console.log('‚úÖ Ready for web interface');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüíæ Test HTML saved. Use this content:');
    console.log('==========================================');
    
} catch (error) {
    console.error('‚ùå Test failed:', error.message);
    console.error('‚ùå Stack:', error.stack);
}

console.log('\nüèÅ Renderer2D testing completed!');
console.log('==========================================');
