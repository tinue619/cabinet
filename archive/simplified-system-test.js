/**
 * –í–†–ï–ú–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –£–ü–†–û–©–ï–ù–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ë–ï–ó –°–ï–ö–¶–ò–ô
 * Domain Layer - Cabinet Entity Hotfix
 */

console.log('üõ†Ô∏è Using simplified cabinet generation (no sections)...');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
import('../../new_core/index.js')
    .then(coreModule => {
        console.log('‚úÖ Core module loaded:', coreModule);
        
        const { SystemFactory } = coreModule;
        
        // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        console.log('üè≠ Creating system...');
        const system = SystemFactory.create({
            enableEvents: true,
            enableValidation: false, // –û–¢–ö–õ–Æ–ß–ê–ï–ú –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ
            debugMode: true
        });
        
        console.log('‚úÖ System created:', system);
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã  
        console.log('üß± Creating materials...');
        const ldsp16 = system.createLDSP16();
        const hdf3 = system.createHDF3();
        const mdf16 = system.createMDF16();
        
        console.log('‚úÖ Materials created:', {
            ldsp16: ldsp16.name,
            hdf3: hdf3.name, 
            mdf16: mdf16.name
        });
        
        // –°–æ–∑–¥–∞–µ–º —à–∫–∞—Ñ
        console.log('üèóÔ∏è Creating cabinet...');
        const cabinet = system.createCabinet({
            width: 800,
            height: 2000,
            depth: 600,
            baseHeight: 100
        });
        
        console.log('‚úÖ Cabinet created:', cabinet);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û –ø–∞–Ω–µ–ª–∏ (–±–µ–∑ —Å–µ–∫—Ü–∏–π)
        console.log('‚öôÔ∏è Generating panels only...');
        try {
            // –í—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –º–∏–Ω—É—è —Å–µ–∫—Ü–∏–∏
            cabinet._createMaterials();
            cabinet._createRequiredPanels();
            cabinet._establishPanelConnections();
            // –ù–ï –í–´–ó–´–í–ê–ï–ú _createBaseSections!
            
            console.log('‚úÖ Panels generated (sections skipped)');
        } catch (error) {
            console.error('‚ùå Panel generation failed:', error);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        const cabinetData = {
            dimensions: cabinet.dimensions,
            panels: cabinet.getPanels(),
            sections: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
            stats: {
                panelsCount: cabinet.getPanels().length,
                sectionsCount: 0,
                volume: (cabinet.dimensions.width * cabinet.dimensions.height * cabinet.dimensions.depth) / 1000000000
            }
        };
        
        console.log('üìä Cabinet data (simplified):', cabinetData);
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞ Canvas
        drawSimplifiedCabinetOnCanvas(cabinetData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateCabinetInfo(cabinetData);
        
        // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        window.dispatchEvent(new CustomEvent('cabinet-app-ready', {
            detail: { 
                message: 'Simplified system test successful',
                cabinet: cabinetData
            }
        }));
        
    })
    .catch(error => {
        console.error('‚ùå SIMPLIFIED SYSTEM TEST FAILED:', error);
        
        window.dispatchEvent(new CustomEvent('cabinet-app-error', {
            detail: { 
                message: `Simplified system test failed: ${error.message}`,
                stack: error.stack
            }
        }));
    });

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–∫–∞—Ñ–∞ –Ω–∞ Canvas (–ë–ï–ó —Å–µ–∫—Ü–∏–π)
 * UI Layer - Simplified Rendering
 */
function drawSimplifiedCabinetOnCanvas(cabinetData) {
    console.log('üé® Drawing simplified cabinet on canvas...');
    
    const canvas = document.getElementById('cabinet-canvas');
    if (!canvas) {
        console.error('‚ùå Canvas not found');
        return;
    }
    
    const ctx = canvas.getContext('2d');
    if (!ctx) {
        console.error('‚ùå Canvas context not found');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
    canvas.width = 800;
    canvas.height = 600;
    
    if (!cabinetData.dimensions) {
        console.error('‚ùå No cabinet dimensions');
        return;
    }
    
    const dims = cabinetData.dimensions;
    
    // –ú–∞—Å—à—Ç–∞–± –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const scale = Math.min(700 / dims.width, 500 / dims.height);
    const offsetX = (canvas.width - dims.width * scale) / 2;
    const offsetY = (canvas.height - dims.height * scale) / 2;
    
    // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –∫–æ–Ω—Ç—É—Ä —à–∫–∞—Ñ–∞
    ctx.fillStyle = '#f0f0f0';
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 2;
    
    const cabinetWidth = dims.width * scale;
    const cabinetHeight = dims.height * scale;
    
    ctx.fillRect(offsetX, offsetY, cabinetWidth, cabinetHeight);
    ctx.strokeRect(offsetX, offsetY, cabinetWidth, cabinetHeight);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    ctx.fillStyle = '#333';
    ctx.font = '16px Arial';
    ctx.fillText(`–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —à–∫–∞—Ñ ${dims.width}√ó${dims.height}√ó${dims.depth}–º–º`, offsetX, offsetY - 20);
    ctx.fillText(`(${cabinetData.stats.panelsCount} –ø–∞–Ω–µ–ª–µ–π, —Å–µ–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã)`, offsetX, offsetY - 5);
    
    console.log('‚úÖ Simplified cabinet drawn on canvas');
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–∞—Ñ–µ –≤ UI
 */
function updateCabinetInfo(cabinetData) {
    console.log('üìã Updating cabinet info...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statVolume = document.getElementById('stat-volume');
    const statPanels = document.getElementById('stat-panels');
    const statSections = document.getElementById('stat-sections');
    
    if (statVolume && cabinetData.stats) {
        const volume = (cabinetData.stats.volume || 0).toFixed(3);
        statVolume.textContent = `${volume} –º¬≥`;
    }
    
    if (statPanels && cabinetData.stats) {
        statPanels.textContent = cabinetData.stats.panelsCount || 0;
    }
    
    if (statSections && cabinetData.stats) {
        statSections.textContent = `${cabinetData.stats.sectionsCount} (–æ—Ç–∫–ª—é—á–µ–Ω—ã)`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π
    const partsList = document.getElementById('parts-list');
    if (partsList && cabinetData.panels) {
        partsList.innerHTML = '';
        
        if (cabinetData.panels.length === 0) {
            const div = document.createElement('div');
            div.className = 'empty-state';
            div.textContent = '–ü–∞–Ω–µ–ª–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è...';
            partsList.appendChild(div);
        } else {
            cabinetData.panels.forEach(panel => {
                const div = document.createElement('div');
                div.className = 'part-item';
                div.innerHTML = `
                    <span class="part-name">${panel.name || '–ü–∞–Ω–µ–ª—å'}</span>
                    <span class="part-material">${panel.material || '–ú–∞—Ç–µ—Ä–∏–∞–ª'}</span>
                `;
                partsList.appendChild(div);
            });
        }
    }
    
    console.log('‚úÖ Cabinet info updated');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export default {
    name: 'Simplified System Test',
    version: '1.0-no-sections'
};
