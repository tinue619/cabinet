/**
 * üé® –ù–û–í–´–ô Panel Renderer 2D –¥–ª—è cabinet-app
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—ã–π Universal2DPanelEngine
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—ã–π —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –ø—Ä–æ—Å—Ç—ã–º –∞–¥–∞–ø—Ç–µ—Ä–æ–º
 */

import PanelEngine from '../../../Universal2DPanelEngine.js';

export class PanelRenderer2D {
    
    constructor(canvasElement, options = {}) {
        if (!canvasElement) {
            throw new Error('PanelRenderer2D requires canvas element');
        }
        
        this.canvas = canvasElement;
        this.ctx = this.canvas.getContext('2d');
        this.options = options;
        
        console.log('üé® PanelRenderer2D –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—ã–π –¥–≤–∏–∂–æ–∫');
    }
    
    initialize() {
        this._setupCanvas();
        console.log('üé® PanelRenderer2D initialized with unified engine');
    }
    
    /**
     * üéØ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π –¥–≤–∏–∂–æ–∫
     */
    render(cabinetData, renderOptions = {}) {
        if (!cabinetData || !cabinetData.panels) {
            console.warn('PanelRenderer2D.render: no panels data');
            return;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–≤–∏–∂–∫–∞
        const renderData = {
            dimensions: cabinetData.dimensions || {
                width: 800,
                height: 2000,
                depth: 600
            }
        };
        
        // ‚ú® –ï–î–ò–ù–´–ô –î–í–ò–ñ–û–ö –î–ï–õ–ê–ï–¢ –í–°–Æ –†–ê–ë–û–¢–£!
        PanelEngine.renderFullCabinet(this.canvas, renderData);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        this._emit('render-complete', {
            panelsCount: cabinetData.panels.length,
            dimensions: renderData.dimensions
        });
    }
    
    setTransform(transform) {
        // –ï–¥–∏–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
        this._emit('transform-changed', { transform });
    }
    
    fitToView(cabinetDimensions) {
        // –ï–¥–∏–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É
        console.log('fitToView: –µ–¥–∏–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç');
    }
    
    resize() {
        this._setupCanvas();
        this._emit('canvas-resized', { 
            width: this.canvas.clientWidth, 
            height: this.canvas.clientHeight 
        });
    }
    
    clear() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    
    // –°–æ–±—ã—Ç–∏–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
    on(eventName, callback) {
        if (!this._callbacks) this._callbacks = new Map();
        if (!this._callbacks.has(eventName)) {
            this._callbacks.set(eventName, []);
        }
        this._callbacks.get(eventName).push(callback);
    }
    
    off(eventName, callback) {
        if (!this._callbacks || !this._callbacks.has(eventName)) return;
        const callbacks = this._callbacks.get(eventName);
        const index = callbacks.indexOf(callback);
        if (index > -1) callbacks.splice(index, 1);
    }
    
    destroy() {
        if (this._callbacks) this._callbacks.clear();
    }
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    _setupCanvas() {
        const rect = this.canvas.getBoundingClientRect();
        const dpr = window.devicePixelRatio || 1;
        
        this.canvas.width = rect.width * dpr;
        this.canvas.height = rect.height * dpr;
        this.canvas.style.width = rect.width + 'px';
        this.canvas.style.height = rect.height + 'px';
        
        this.ctx.scale(dpr, dpr);
        this.ctx.imageSmoothingEnabled = true;
        this.ctx.imageSmoothingQuality = 'high';
    }
    
    _emit(eventName, data) {
        if (!this._callbacks || !this._callbacks.has(eventName)) return;
        this._callbacks.get(eventName).forEach(callback => {
            try {
                callback(data);
            } catch (error) {
                console.error(`PanelRenderer2D event error:`, error);
            }
        });
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    static createForCanvas(canvasId, options = {}) {
        const canvas = document.getElementById(canvasId);
        if (!canvas) {
            throw new Error(`Canvas element with ID '${canvasId}' not found`);
        }
        
        const renderer = new PanelRenderer2D(canvas, options);
        renderer.initialize();
        return renderer;
    }
    
    static getInfo() {
        return Object.freeze({
            name: 'PanelRenderer2D',
            version: '2.0.0',
            responsibility: 'Adapter to Universal2DPanelEngine',
            engine: 'Universal2DPanelEngine',
            dependencies: 'Universal2DPanelEngine only'
        });
    }
}

console.log('üé® PanelRenderer2D v2.0 loaded - unified engine adapter');
