// üõ°Ô∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –°–¢–†–ê–ñ - –ó–∞—â–∏—Ç–Ω–∏–∫ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –û–û–ü
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

"use strict";

import { CABINET_DNA } from '../cabinet-dna.js';

/**
 * üõ°Ô∏è –°–¢–†–ê–ñ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–• –ü–†–ò–ù–¶–ò–ü–û–í
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–æ–Ω–æ–≤ –∏–∑ –î–ù–ö
 * –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞—Ä—É—à–∏—Ç—å –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—é –∏–ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü
 */
export class ArchitecturalGuardian {
    constructor() {
        // üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏–µ
        let _violations = [];
        let _enforcedLaws = Object.keys(CABINET_DNA.LAWS);
        
        // üîç –ü—É–±–ª–∏—á–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
        Object.defineProperty(this, 'violations', {
            get: () => [..._violations], // –ö–æ–ø–∏—è –º–∞—Å—Å–∏–≤–∞
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'enforcedLaws', {
            get: () => [..._enforcedLaws], // –ö–æ–ø–∏—è –º–∞—Å—Å–∏–≤–∞
            enumerable: true,
            configurable: false
        });
    
        /**
         * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤
         * @param {Object} entity - –ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è —Å—É—â–Ω–æ—Å—Ç—å
         * @param {string} operation - –í—ã–ø–æ–ª–Ω—è–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è  
         * @returns {boolean} - true –µ—Å–ª–∏ –≤—Å–µ –∑–∞–∫–æ–Ω—ã —Å–æ–±–ª—é–¥–µ–Ω—ã
         */
        this.validateEntity = (entity, operation = 'VALIDATE') => {
            _violations = []; // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤
            
            for (const law of _enforcedLaws) {
                const violation = this._checkLaw(law, entity, operation);
                if (violation) {
                    _violations.push(violation);
                }
            }
            
            return _violations.length === 0;
        };
        
        /**
         * ‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞
         * @private
         */
        this._checkLaw = (lawName, entity, operation) => {
            try {
                switch(lawName) {
                    case 'ENCAPSULATION':
                        return this._validateEncapsulation(entity);
                    case 'MINIMUM_SECTION_SIZE':
                        return this._validateSectionSize(entity);
                    case 'MATERIAL_CONSISTENCY':
                        return this._validateMaterialConsistency(entity);
                    case 'SECTION_2D_NATURE':
                        return this._validateSection2D(entity);
                    case 'EDITING_2D_ONLY':
                        return this._validateEditingMode(entity, operation);
                    default:
                        return null;
                }  
            } catch (error) {
                return {
                    law: lawName,
                    message: `Validation error: ${error.message}`,
                    severity: 'ERROR'
                };
            }
        };
        
        /**
         * üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏
         * @private
         */
        this._validateEncapsulation = (entity) => {
            if (entity && typeof entity === 'object' && !entity._isEncapsulated) {
                return {
                    law: 'ENCAPSULATION',
                    message: `Entity must be properly encapsulated`,
                    severity: 'ERROR'
                };
            }
            return null;
        };
        
        /**
         * üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ–∫—Ü–∏–π
         * @private
         */
        this._validateSectionSize = (entity) => {
            if (entity && entity.type === 'Section' && entity.dimensions) {
                const minSize = CABINET_DNA.CONSTANTS.MIN_SECTION_SIZE;
                if (entity.dimensions.width < minSize || entity.dimensions.height < minSize) {
                    return {
                        law: 'MINIMUM_SECTION_SIZE',
                        message: `Section size (${entity.dimensions.width}x${entity.dimensions.height}) is below minimum (${minSize}x${minSize})`,
                        severity: 'ERROR'
                    };
                }
            }
            return null;
        };
        
        /**
         * üß± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
         * @private
         */
        this._validateMaterialConsistency = (entity) => {
            if (entity && entity.type === 'Panel' && entity.material && entity.panelType) {
                const material = entity.material;
                const panelType = entity.panelType;
                
                if (!material.isCompatibleWith || !material.isCompatibleWith(panelType)) {
                    return {
                        law: 'MATERIAL_CONSISTENCY',
                        message: `Material ${material.name} may not be suitable for ${panelType}`,
                        severity: 'WARNING'
                    };
                }
            }
            return null;
        };
        
        /**
         * üìê –ü—Ä–æ–≤–µ—Ä–∫–∞ 2D –ø—Ä–∏—Ä–æ–¥—ã —Å–µ–∫—Ü–∏–π
         * @private
         */
        this._validateSection2D = (entity) => {
            if (entity && entity.type === 'Section' && entity.position && entity.position.z !== undefined) {
                return {
                    law: 'SECTION_2D_NATURE',
                    message: `Section should not have Z coordinate - it's a 2D entity`,
                    severity: 'WARNING'
                };
            }
            return null;
        };
        
        /**
         * ‚úèÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         * @private
         */
        this._validateEditingMode = (entity, operation) => {
            if (operation && operation.includes('EDIT') && entity && entity.viewMode === '3D') {
                return {
                    law: 'EDITING_2D_ONLY',
                    message: `Cannot edit in 3D mode - editing only allowed in 2D`,
                    severity: 'ERROR'
                };
            }
            return null;
        };
        
        /**
         * üìã –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
         * @returns {Object} - –û—Ç—á–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
         */
        this.getViolationReport = () => {
            const currentViolations = this.violations; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ—Ç—Ç–µ—Ä
            return Object.freeze({
                hasViolations: currentViolations.length > 0,
                errors: currentViolations.filter(v => v.severity === 'ERROR'),
                warnings: currentViolations.filter(v => v.severity === 'WARNING'),
                all: [...currentViolations]
            });
        };
    
        /**
         * üö® –í—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
         * @param {string} operation - –û–ø–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
         */
        this.enforceOrThrow = (operation = 'operation') => {
            const report = this.getViolationReport();
            if (report.errors.length > 0) {
                const errorMessages = report.errors.map(e => e.message).join('; ');
                throw new Error(`Architectural violation in ${operation}: ${errorMessages}`);
            }
        };
        
        // üîí –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ —Å—Ç—Ä–∞–∂–∞
        Object.freeze(this);
    }
}

console.log('üõ°Ô∏è Architectural Guardian loaded');
