// üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–ê–Ø –ë–ê–ó–ê - –§—É–Ω–¥–∞–º–µ–Ω—Ç –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—é –∏ –µ–¥–∏–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

"use strict";

import { ArchitecturalGuardian } from './ArchitecturalGuardian.js';

/**
 * üèóÔ∏è –ë–ê–ó–û–í–´–ô –ö–õ–ê–°–° –í–°–ï–• –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–• –°–£–©–ù–û–°–¢–ï–ô
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—é, –∏–µ—Ä–∞—Ä—Ö–∏—é, —Å–æ–±—ã—Ç–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
 * –í—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
 */
export class ArchitecturalBase {
    constructor(type, id) {
        // üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è (–ø–æ–ª–Ω–∞—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è)
        let _id = id || `${type.toLowerCase()}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        let _type = type;
        let _created = Date.now();
        let _modified = _created;
        let _parent = null;
        let _children = new Map();
        let _properties = new Map();
        let _eventListeners = new Map();
        
        // üõ°Ô∏è –°—Ç—Ä–∞–∂ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
        const guardian = new ArchitecturalGuardian();
        
        // üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
        Object.defineProperty(this, 'id', {
            get: () => _id,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'type', {
            get: () => _type,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'created', {
            get: () => _created,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'modified', {
            get: () => _modified,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'parent', {
            get: () => _parent,
            enumerable: true,
            configurable: false
        });
        
        // üîê –ú–∞—Ä–∫–µ—Ä –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ (–¥–ª—è —Å—Ç—Ä–∞–∂–∞)
        Object.defineProperty(this, '_isEncapsulated', {
            value: true,
            enumerable: false,
            configurable: false
        });
        
        // ===============================================
        // üîÑ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ï–†–ê–†–•–ò–ï–ô (–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã)
        // ===============================================
        
        /**
         * üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
         * @param {ArchitecturalBase|null} newParent 
         */
        this._setParent = (newParent) => {
            if (_parent === newParent) return;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞–∂–∞
            if (!guardian.validateEntity(this, 'SET_PARENT')) {
                guardian.enforceOrThrow('SET_PARENT');
            }
            
            const oldParent = _parent;
            _parent = newParent;
            _modified = Date.now();
            
            this._emit('parent-changed', { oldParent, newParent });
        };
        
        /**
         * ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
         * @param {ArchitecturalBase} child 
         */
        this._addChild = (child) => {
            if (!child || !child.id) {
                throw new Error('Child must have valid id');
            }
            
            if (_children.has(child.id)) {
                throw new Error(`Child with id ${child.id} already exists`);
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞–∂–∞
            if (!guardian.validateEntity(child, 'ADD_CHILD')) {
                guardian.enforceOrThrow('ADD_CHILD');
            }
            
            _children.set(child.id, child);
            child._setParent(this);
            _modified = Date.now();
            
            this._emit('child-added', { child });
            return child;
        };
        
        /**
         * ‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
         * @param {string} childId 
         */
        this._removeChild = (childId) => {
            const child = _children.get(childId);
            if (!child) return null;
            
            _children.delete(childId);
            child._setParent(null);
            _modified = Date.now();
            
            this._emit('child-removed', { child });
            return child;
        };
        
        // ===============================================
        // üîç –ú–ï–¢–û–î–´ –î–û–°–¢–£–ü–ê –ö –ò–ï–†–ê–†–•–ò–ò (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
        // ===============================================
        
        /**
         * üîç –ü–æ–ª—É—á–∏—Ç—å –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID
         * @param {string} childId 
         * @returns {ArchitecturalBase|null}
         */
        this.getChild = (childId) => {
            return _children.get(childId) || null;
        };
        
        /**
         * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –¥–µ—Ç–µ–π
         * @returns {ArchitecturalBase[]}
         */
        this.getChildren = () => {
            return Array.from(_children.values());
        };
        
        /**
         * ‚ùì –ï—Å—Ç—å –ª–∏ –¥–µ—Ç–∏
         * @returns {boolean}
         */
        this.hasChildren = () => {
            return _children.size > 0;
        };
        
        /**
         * ‚ùì –ï—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫
         * @param {string} childId 
         * @returns {boolean}
         */
        this.hasChild = (childId) => {
            return _children.has(childId);
        };
        
        /**
         * üîç –ü–æ–∏—Å–∫ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–æ –ø—Ä–µ–¥–∏–∫–∞—Ç—É
         * @param {Function} predicate 
         * @returns {ArchitecturalBase[]}
         */
        this.findInHierarchy = (predicate) => {
            const results = [];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–±—è
            if (predicate(this)) {
                results.push(this);
            }
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–π
            for (const child of _children.values()) {
                if (child.findInHierarchy) {
                    results.push(...child.findInHierarchy(predicate));
                }
            }
            
            return results;
        };
        
        // ===============================================
        // üè∑Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–í–û–ô–°–¢–í–ê–ú–ò
        // ===============================================
        
        /**
         * üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤–∞ (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
         * @param {string} key 
         * @param {any} value 
         */
        this._setProperty = (key, value) => {
            const oldValue = _properties.get(key);
            _properties.set(key, value);
            _modified = Date.now();
            
            this._emit('property-changed', { key, oldValue, newValue: value });
        };
        
        /**
         * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
         * @param {string} key 
         * @returns {any}
         */
        this.getProperty = (key) => {
            return _properties.get(key);
        };
        
        /**
         * ‚ùì –ï—Å—Ç—å –ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ
         * @param {string} key 
         * @returns {boolean}
         */
        this.hasProperty = (key) => {
            return _properties.has(key);
        };
        
        /**
         * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞
         * @returns {Map}
         */
        this.getProperties = () => {
            return new Map(_properties);
        };
        
        // ===============================================
        // üì° –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô
        // ===============================================
        
        /**
         * üëÇ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
         * @param {string} event 
         * @param {Function} listener 
         * @returns {Function} - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏
         */
        this.on = (event, listener) => {
            if (typeof listener !== 'function') {
                throw new Error('Listener must be a function');
            }
            
            if (!_eventListeners.has(event)) {
                _eventListeners.set(event, new Set());
            }
            _eventListeners.get(event).add(listener);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
            return () => {
                const listeners = _eventListeners.get(event);
                if (listeners) {
                    listeners.delete(listener);
                }
            };
        };
        
        /**
         * üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
         * @param {string} event 
         * @param {Object} data 
         */
        this._emit = (event, data = {}) => {
            const listeners = _eventListeners.get(event);
            if (listeners) {
                for (const listener of listeners) {
                    try {
                        listener({ 
                            ...data, 
                            source: this, 
                            event, 
                            timestamp: Date.now() 
                        });
                    } catch (error) {
                        console.error(`Error in event listener for ${event}:`, error);
                    }
                }
            }
            
            // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é (bubble up)
            if (_parent && _parent._emit) {
                _parent._emit(`child-${event}`, { ...data, child: this });
            }
        };
        
        // ===============================================
        // üîÑ –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–´
        // ===============================================
        
        /**
         * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏
         * @returns {boolean}
         */
        this.validate = () => {
            return guardian.validateEntity(this, 'VALIDATE');
        };
        
        /**
         * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
         * @returns {Object}
         */
        this.getValidationReport = () => {
            guardian.validateEntity(this, 'VALIDATE');
            return guardian.getViolationReport();
        };
        
        // ===============================================
        // üíæ –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø
        // ===============================================
        
        /**
         * üíæ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON
         * @returns {Object}
         */
        this.serialize = () => {
            return Object.freeze({
                id: _id,
                type: _type,
                created: _created,
                modified: _modified,
                parent: _parent?.id || null,
                children: Array.from(_children.values()).map(child => child.serialize()),
                properties: Object.fromEntries(_properties),
                ...this.getSpecificData()
            });
        };
        
        /**
         * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–∏
         * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
         * @returns {Object}
         */
        this.getSpecificData = () => {
            return {};
        };
        
        // ===============================================
        // üîí –§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê
        // ===============================================
        
        // –ü–û–õ–ù–û–ï –ó–ê–ú–û–†–ê–ñ–ò–í–ê–ù–ò–ï –ü–ï–†–ï–ù–û–°–ò–ú –í –ù–ê–°–õ–ï–î–ù–ò–ö–ò!
        // –ß—Ç–æ–±—ã –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –º–æ–≥–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Å–≤–æ–π—Å—Ç–≤–∞
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        Object.freeze(this.getChild);
        Object.freeze(this.getChildren);
        Object.freeze(this.findInHierarchy);
        Object.freeze(this.validate);
        Object.freeze(this.serialize);
        
        // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
        this._finalizeEntity = () => {
            Object.preventExtensions(this);
        };
    }
}

console.log('üèóÔ∏è Architectural Base loaded');