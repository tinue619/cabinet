// üìê –°–ï–ö–¶–ò–Ø - 2D –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è
// –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

"use strict";

import { ArchitecturalBase } from '../core/ArchitecturalBase.js';
import { CABINET_DNA } from '../cabinet-dna.js';

/**
 * üìê –°–ï–ö–¶–ò–Ø
 * 2D –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
 * –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ XY (–≤–∏–¥ —Å–≤–µ—Ä—Ö—É)
 */
export class Section extends ArchitecturalBase {
    constructor(bounds, parentCabinet) {
        super('Section', `section_${Date.now()}`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!bounds || typeof bounds !== 'object') {
            throw new Error('Section requires valid bounds object');
        }
        
        if (!parentCabinet) {
            throw new Error('Section must belong to a cabinet');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        const width = bounds.right - bounds.left;
        const height = bounds.bottom - bounds.top;
        const minSize = CABINET_DNA.CONSTANTS.MIN_SECTION_SIZE;
        
        if (width < minSize || height < minSize) {
            throw new Error(`Section too small: ${width}x${height}mm. Minimum: ${minSize}mm`);
        }
        
        // üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        let _bounds = Object.freeze({
            left: bounds.left,
            right: bounds.right,
            top: bounds.top,
            bottom: bounds.bottom,
            width: width,
            height: height
        });
        
        let _parentCabinet = parentCabinet;
        let _boundingPanels = {
            left: null,
            right: null,
            top: null,
            bottom: null
        };
        
        let _content = new Map();
        let _subdivisions = new Map();
        let _isActive = true;
        
        // ===============================================
        // üîç –ü–£–ë–õ–ò–ß–ù–´–ï –ì–ï–¢–¢–ï–†–´
        // ===============================================
        
        Object.defineProperty(this, 'bounds', {
            get: () => _bounds,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'width', {
            get: () => _bounds.width,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'height', {
            get: () => _bounds.height,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'isEmpty', {
            get: () => _content.size === 0 && _subdivisions.size === 0,
            enumerable: true,
            configurable: false
        });
        
        // ===============================================
        // üì¶ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–î–ï–†–ñ–ò–ú–´–ú
        // ===============================================
        
        /**
         * ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Å–µ–∫—Ü–∏—é
         * @param {string} contentType - —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
         * @param {Object} item - –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
         * @returns {boolean}
         */
        this.addContent = (contentType, item) => {
            if (!_isActive) {
                throw new Error('Cannot add content to inactive section');
            }
            
            const contentId = item.id || `${contentType}_${Date.now()}`;
            _content.set(contentId, { type: contentType, item, added: Date.now() });
            
            this._emit('content-added', { contentType, contentId });
            return true;
        };
        
        /**
         * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
         * @returns {Array}
         */
        this.getContent = () => {
            return Array.from(_content.values());
        };
        
        /**
         * üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ –≤ —Å–µ–∫—Ü–∏—é
         * @param {number} x 
         * @param {number} y 
         * @returns {boolean}
         */
        this.containsPoint = (x, y) => {
            return x >= _bounds.left && x <= _bounds.right &&
                   y >= _bounds.top && y <= _bounds.bottom;
        };
        
        // ===============================================
        // üíæ –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø
        // ===============================================
        
        this.getSpecificData = () => {
            return {
                bounds: _bounds,
                content: Array.from(_content.values()),
                subdivisions: Array.from(_subdivisions.keys()),
                isActive: _isActive
            };
        };
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
        Object.freeze(this.addContent);
        Object.freeze(this.getContent);
        Object.freeze(this.containsPoint);
        Object.preventExtensions(this);
    }
}

console.log('üìê Section entity loaded');
