// üèóÔ∏è –®–ö–ê–§ - –ö–æ—Ä–Ω–µ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
// –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –ø–∞–Ω–µ–ª–∏, —Å–µ–∫—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º

"use strict";

import { ArchitecturalBase } from '../core/ArchitecturalBase.js';
import { CABINET_DNA } from '../cabinet-dna.js';
import { Panel } from './Panel.js';
import { Section } from './Section.js';
import { Material } from './Material.js';

/**
 * üèóÔ∏è –®–ö–ê–§
 * –ö–æ—Ä–Ω–µ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å - –≥–æ—Ç–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º –∏–∑ –î–ù–ö
 */
export class Cabinet extends ArchitecturalBase {
    constructor(dimensions, options = {}) {
        super('Cabinet', `cabinet_${Date.now()}`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        if (!dimensions || !dimensions.width || !dimensions.height || !dimensions.depth) {
            throw new Error('Cabinet requires valid dimensions: {width, height, depth}');
        }
        
        // üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∫–∞—Ñ–∞
        let _dimensions = Object.freeze({
            width: dimensions.width,        // xCabinet
            height: dimensions.height,      // yCabinet  
            depth: dimensions.depth,        // zCabinet
            baseHeight: dimensions.baseHeight || 100
        });
        
        let _materialThickness = options.materialThickness || CABINET_DNA.CONSTANTS.DEFAULT_PANEL_THICKNESS;
        let _panels = new Map();
        let _sections = new Map();
        let _materials = new Map();
        let _isGenerated = false;
        
        // ===============================================
        // üîç –ü–£–ë–õ–ò–ß–ù–´–ï –ì–ï–¢–¢–ï–†–´
        // ===============================================
        
        Object.defineProperty(this, 'dimensions', {
            get: () => _dimensions,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'materialThickness', {
            get: () => _materialThickness,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'isGenerated', {
            get: () => _isGenerated,
            enumerable: true,
            configurable: false
        });
        
        // ===============================================
        // üè≠ –ì–ï–ù–ï–†–ê–¶–ò–Ø –®–ö–ê–§–ê
        // ===============================================
        
        /**
         * üèóÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —à–∫–∞—Ñ–∞
         * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–∞–Ω–µ–ª–∏ –∏ —Å–µ–∫—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º –∏–∑ –î–ù–ö
         */
        this.generate = () => {
            if (_isGenerated) {
                console.warn('Cabinet already generated');
                return;
            }
            
            try {
                // 1. –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                this._createMaterials();
                
                // 2. –°–æ–∑–¥–∞–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
                this._createRequiredPanels();
                
                // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏
                this._establishPanelConnections();
                
                // 4. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ–∫—Ü–∏–∏
                this._createBaseSections();
                
                _isGenerated = true;
                this._emit('cabinet-generated', { 
                    panelsCount: _panels.size,
                    sectionsCount: _sections.size 
                });
                
                console.log(`üèóÔ∏è Cabinet generated: ${_panels.size} panels, ${_sections.size} sections`);
                
            } catch (error) {
                console.error('Cabinet generation failed:', error);
                throw error;
            }
        };
        
        /**
         * üß± –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
         * @private
         */
        this._createMaterials = () => {
            _materials.set('LDSP_16', Material.createLDSP16());
            _materials.set('HDF_3', Material.createHDF3());
            _materials.set('MDF_16', Material.createMDF16());
        };
        
        /**
         * üìê –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
         * @private
         */
        this._createRequiredPanels = () => {
            for (const [panelKey, panelSpec] of Object.entries(CABINET_DNA.REQUIRED_PANELS)) {
                const material = _materials.get(panelSpec.material);
                if (!material) {
                    throw new Error(`Material ${panelSpec.material} not found for panel ${panelKey}`);
                }
                
                const panel = new Panel(panelKey, material, this);
                _panels.set(panelKey, panel);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
                this._addChild(panel);
            }
        };
        
        /**
         * üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏
         * @private
         */
        this._establishPanelConnections = () => {
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞–Ω–µ–ª–∏
            const leftSide = _panels.get('LEFT_SIDE');
            const rightSide = _panels.get('RIGHT_SIDE');
            const top = _panels.get('TOP');
            const bottom = _panels.get('BOTTOM');
            const frontBase = _panels.get('FRONT_BASE');
            const backBase = _panels.get('BACK_BASE');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (leftSide && top) leftSide.connectTo(top);
            if (leftSide && bottom) leftSide.connectTo(bottom);
            if (rightSide && top) rightSide.connectTo(top);
            if (rightSide && bottom) rightSide.connectTo(bottom);
            if (leftSide && frontBase) leftSide.connectTo(frontBase);
            if (rightSide && frontBase) rightSide.connectTo(frontBase);
            if (leftSide && backBase) leftSide.connectTo(backBase);
            if (rightSide && backBase) rightSide.connectTo(backBase);
        };
        
        /**
         * üìê –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–µ–∫—Ü–∏–π
         * @private
         */
        this._createBaseSections = () => {
            // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å–µ–∫—Ü–∏—é –º–µ–∂–¥—É –±–æ–∫–æ–≤–∏–Ω–∞–º–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞–Ω–µ–ª—è–º–∏
            const leftPanel = _panels.get('LEFT_SIDE');
            const rightPanel = _panels.get('RIGHT_SIDE');
            const topPanel = _panels.get('TOP');
            const bottomPanel = _panels.get('BOTTOM');
            
            if (leftPanel && rightPanel && topPanel && bottomPanel) {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è Canvas-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (Y=0 –≤–≤–µ—Ä—Ö—É)
                const mainSectionBounds = {
                    left: leftPanel.position.x + leftPanel.dimensions.width,    // 0 + 16 = 16
                    right: rightPanel.position.x,                               // 784
                    top: topPanel.position.y + topPanel.dimensions.height,      // 0 + 16 = 16 (—Å–≤–µ—Ä—Ö—É)
                    bottom: bottomPanel.position.y                              // 1884 (—Å–Ω–∏–∑—É)
                };
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ–∫—Ü–∏–∏
                const width = mainSectionBounds.right - mainSectionBounds.left;
                const height = mainSectionBounds.bottom - mainSectionBounds.top;
                
                console.log('üîç Section bounds calculation (Canvas coords):');
                console.log('  LEFT panel:', leftPanel.position, leftPanel.dimensions);
                console.log('  RIGHT panel:', rightPanel.position, rightPanel.dimensions);
                console.log('  TOP panel:', topPanel.position, topPanel.dimensions);
                console.log('  BOTTOM panel:', bottomPanel.position, bottomPanel.dimensions);
                console.log('  Section bounds:', mainSectionBounds);
                console.log('  Section size:', {width, height});
                
                if (width > CABINET_DNA.CONSTANTS.MIN_SECTION_SIZE && height > CABINET_DNA.CONSTANTS.MIN_SECTION_SIZE) {
                    const mainSection = new Section(mainSectionBounds, this);
                    _sections.set('MAIN_SECTION', mainSection);
                    this._addChild(mainSection);
                    console.log('‚úÖ Main section created successfully:', {width, height});
                } else {
                    console.error('‚ùå Section too small:', {width, height, minRequired: CABINET_DNA.CONSTANTS.MIN_SECTION_SIZE});
                    throw new Error(`Section dimensions ${width}√ó${height}mm below minimum ${CABINET_DNA.CONSTANTS.MIN_SECTION_SIZE}mm`);
                }
            }
        };
        
        // ===============================================
        // üìã –ú–ï–¢–û–î–´ –î–û–°–¢–£–ü–ê
        // ===============================================
        
        /**
         * üìê –ü–æ–ª—É—á–∏—Ç—å –ø–∞–Ω–µ–ª—å –ø–æ —Ç–∏–ø—É
         * @param {string} panelType 
         * @returns {Panel|null}
         */
        this.getPanel = (panelType) => {
            return _panels.get(panelType) || null;
        };
        
        /**
         * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∞–Ω–µ–ª–∏ (–æ–±—ä–µ–∫—Ç—ã)
         * @returns {Panel[]}
         */
        this.getPanels = () => {
            return Array.from(_panels.values());
        };
        
        /**
         * üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–Ω–µ–ª–µ–π —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ (–£–ü–†–û–©–ï–ù–ò–ï - –ú–û–ó–ì —Å—á–∏—Ç–∞–µ—Ç —Å–∞–º)
         * @returns {Array}
         */
        this.getPanelsWithSizes = () => {
            const panels = [];
            
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–Ω–µ–ª—è–º
            for (const [panelKey, panelSpec] of Object.entries(CABINET_DNA.REQUIRED_PANELS)) {
                const material = _materials.get(panelSpec.material);
                if (!material) continue;
                
                // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º –∏–∑ –î–ù–ö
                let w, h, d;
                
                switch (panelKey) {
                    case 'LEFT_SIDE':
                    case 'RIGHT_SIDE':
                        w = material.thickness;
                        h = _dimensions.height;
                        d = _dimensions.depth;
                        break;
                    case 'TOP':
                        w = _dimensions.width;
                        h = material.thickness;
                        d = _dimensions.depth;
                        break;
                    case 'BOTTOM':
                        w = _dimensions.width - 2 * _materialThickness;
                        h = material.thickness;
                        d = _dimensions.depth;
                        break;
                    case 'FRONT_BASE':
                    case 'BACK_BASE':
                        w = _dimensions.width - 2 * _materialThickness;
                        h = _dimensions.baseHeight; // –ü–†–ê–í–ò–õ–¨–ù–û: –≤—ã—Å–æ—Ç–∞ —Ü–æ–∫–æ–ª—è
                        d = material.thickness;     // –ü–†–ê–í–ò–õ–¨–ù–û: —Ç–æ–ª—â–∏–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                        break;
                    case 'BACK_WALL':
                        w = _dimensions.width - 2 * _materialThickness;
                        h = _dimensions.height - _dimensions.baseHeight - _materialThickness;
                        d = material.thickness;
                        break;
                    case 'FACADE':
                        w = _dimensions.width;
                        h = _dimensions.height - _dimensions.baseHeight;
                        d = material.thickness;
                        break;
                    default:
                        w = 100; h = 100; d = material.thickness;
                }
                
                panels.push({
                    name: panelSpec.name,
                    w: Math.round(w),
                    h: Math.round(h),
                    d: Math.round(d),
                    material: material.name,
                    type: panelSpec.type
                });
            }
            
            return panels;
        };
        
        /**
         * üìê –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ü–∏—é –ø–æ ID
         * @param {string} sectionId 
         * @returns {Section|null}
         */
        this.getSection = (sectionId) => {
            return _sections.get(sectionId) || null;
        };
        
        /**
         * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
         * @returns {Section[]}
         */
        this.getSections = () => {
            return Array.from(_sections.values());
        };
        
        /**
         * üß± –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–∏–ø—É
         * @param {string} materialType 
         * @returns {Material|null}
         */
        this.getMaterial = (materialType) => {
            return _materials.get(materialType) || null;
        };
        
        // ===============================================
        // üìè –ì–ï–û–ú–ï–¢–†–ò–ß–ï–°–ö–ò–ï –û–ü–ï–†–ê–¶–ò–ò
        // ===============================================
        
        /**
         * üìè –ü–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤)
         */
        this.recalculateGeometry = () => {
            for (const panel of _panels.values()) {
                if (panel.recalculateDimensions) {
                    panel.recalculateDimensions();
                }
            }
            
            this._emit('geometry-recalculated');
        };
        
        /**
         * üìä –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∫–∞—Ñ–∞
         * @returns {Object}
         */
        this.getStats = () => {
            return Object.freeze({
                dimensions: _dimensions,
                materialThickness: _materialThickness,
                panelsCount: _panels.size,
                sectionsCount: _sections.size,
                materialsCount: _materials.size,
                isGenerated: _isGenerated,
                volume: _dimensions.width * _dimensions.height * _dimensions.depth
            });
        };
        
        // ===============================================
        // üíæ –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø
        // ===============================================
        
        this.getSpecificData = () => {
            return {
                dimensions: _dimensions,
                materialThickness: _materialThickness,
                isGenerated: _isGenerated,
                panels: Array.from(_panels.entries()).map(([key, panel]) => ({
                    key,
                    panel: panel.serialize()
                })),
                sections: Array.from(_sections.entries()).map(([key, section]) => ({
                    key,
                    section: section.serialize()
                })),
                materials: Array.from(_materials.entries()).map(([key, material]) => ({
                    key,
                    material: material.serialize()
                })),
                stats: this.getStats()
            };
        };
        
        // ===============================================
        // üîí –§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê
        // ===============================================
        
        // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã
        Object.freeze(this.generate);
        Object.freeze(this.getPanel);
        Object.freeze(this.getPanels);
        Object.freeze(this.getSection);
        Object.freeze(this.getSections);
        Object.freeze(this.getMaterial);
        Object.freeze(this.recalculateGeometry);
        Object.freeze(this.getStats);
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
        Object.preventExtensions(this);
    }
    
    // ===============================================
    // üè≠ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´
    // ===============================================
    
    /**
     * üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —à–∫–∞—Ñ–∞
     * @param {number} width 
     * @param {number} height 
     * @param {number} depth 
     * @returns {Cabinet}
     */
    static createStandard(width = 800, height = 2000, depth = 600) {
        const cabinet = new Cabinet({
            width,
            height,
            depth,
            baseHeight: 100
        });
        
        cabinet.generate();
        return cabinet;
    }
}

console.log('üèóÔ∏è Cabinet entity loaded');
