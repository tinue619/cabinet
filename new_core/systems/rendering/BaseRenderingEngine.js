/**
 * üé® –ë–ê–ó–û–í–´–ô –î–í–ò–ñ–û–ö –†–ï–ù–î–ï–†–ò–ù–ì–ê
 * SYSTEM LAYER: Rendering Infrastructure  
 * –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨: –ï–î–ò–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –ª–æ–≥–∏–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –ó–∏–≥–æ—Ç–∞ v3.1
 */

"use strict";

import { CABINET_DNA } from '../../cabinet-dna.js';

/**
 * üèóÔ∏è –ë–ê–ó–û–í–´–ô –î–í–ò–ñ–û–ö –†–ï–ù–î–ï–†–ò–ù–ì–ê
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–∞–Ω–µ–ª–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º–∏ UI —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞–º–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
 */
export class BaseRenderingEngine {
    
    constructor() {
        // üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        this._constants = Object.freeze({
            MIN_STROKE_WIDTH: 0.5,
            MAX_PANEL_THICKNESS_PX: 12,
            MIN_PANEL_THICKNESS_PX: 2,
            DEFAULT_PANEL_THICKNESS: CABINET_DNA.CONSTANTS.DEFAULT_PANEL_THICKNESS,
            LABEL_MIN_WIDTH: 60,
            LABEL_MIN_HEIGHT: 30
        });
        
        // üé® –ë–∞–∑–æ–≤–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø–∞–Ω–µ–ª–µ–π
        this._panelColors = Object.freeze({
            'LEFT_SIDE': '#4a9eff',      // –°–∏–Ω–∏–π
            'RIGHT_SIDE': '#4a9eff',     // –°–∏–Ω–∏–π  
            'TOP': '#34d399',            // –ó–µ–ª–µ–Ω—ã–π
            'BOTTOM': '#34d399',         // –ó–µ–ª–µ–Ω—ã–π
            'FRONT_BASE': '#f59e0b',     // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'BACK_BASE': '#f59e0b',      // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'BACK_WALL': '#8b5cf6',      // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'FACADE': '#ef4444',         // –ö—Ä–∞—Å–Ω—ã–π
            'default': '#6b7280'         // –°–µ—Ä—ã–π
        });
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
        Object.freeze(this);
    }
    
    // ===============================================
    // üéØ –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ - –ï–î–ò–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –ò–°–¢–ò–ù–´
    // ===============================================
    
    /**
     * üîß –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã –ø–∞–Ω–µ–ª–∏
     * –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ —ç—Ç–æ–π –ª–æ–≥–∏–∫–∏ –≤–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ
     * @param {number} realThickness - —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (thickness * scale)
     * @param {number} scale - —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @returns {number} –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     */
    calculateProportionalThickness(realThickness, scale = 1) {
        if (typeof realThickness !== 'number' || realThickness < 0) {
            throw new Error('BaseRenderingEngine: realThickness must be a positive number');
        }
        
        // üéØ –ö–õ–Æ–ß–ï–í–ê–Ø –§–û–†–ú–£–õ–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–†–¶–û–í:
        // –ú–∏–Ω–∏–º—É–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏, –º–∞–∫—Å–∏–º—É–º –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
        return Math.max(
            this._constants.MIN_PANEL_THICKNESS_PX,
            Math.min(realThickness, this._constants.MAX_PANEL_THICKNESS_PX)
        );
    }
    
    /**
     * üñäÔ∏è –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã –æ–±–≤–æ–¥–∫–∏
     * @param {number} baseWidth - –±–∞–∑–æ–≤–∞—è —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏
     * @param {number} scale - —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è  
     * @returns {number} –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏
     */
    calculateProportionalStroke(baseWidth, scale = 1) {
        if (typeof baseWidth !== 'number' || baseWidth <= 0) {
            throw new Error('BaseRenderingEngine: baseWidth must be a positive number');
        }
        
        return Math.max(this._constants.MIN_STROKE_WIDTH, baseWidth / scale);
    }
    
    /**
     * üé® –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–∞–Ω–µ–ª–∏ –ø–æ —Ç–∏–ø—É
     * @param {string} panelType - —Ç–∏–ø –ø–∞–Ω–µ–ª–∏ (LEFT_SIDE, RIGHT_SIDE, etc.)
     * @returns {string} HEX —Ü–≤–µ—Ç –ø–∞–Ω–µ–ª–∏
     */
    getPanelColor(panelType) {
        return this._panelColors[panelType] || this._panelColors.default;
    }
    
    /**
     * üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
     * @param {number} width - —à–∏—Ä–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     * @param {number} height - –≤—ã—Å–æ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     * @returns {boolean} –º–æ–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å
     */
    shouldShowLabel(width, height) {
        return width >= this._constants.LABEL_MIN_WIDTH && 
               height >= this._constants.LABEL_MIN_HEIGHT;
    }
    
    /**
     * üîç –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {Object} containerSize - {width, height} —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     * @param {Object} contentSize - {width, height} —Ä–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
     * @param {number} padding - –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     * @param {number} maxScale - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
     * @returns {Object} {scale, offsetX, offsetY}
     */
    calculateAutoScale(containerSize, contentSize, padding = 60, maxScale = 2.0) {
        const availableWidth = containerSize.width - (padding * 2);
        const availableHeight = containerSize.height - (padding * 2);
        
        const scaleX = availableWidth / contentSize.width;
        const scaleY = availableHeight / contentSize.height;
        const scale = Math.min(scaleX, scaleY, maxScale);
        
        const scaledWidth = contentSize.width * scale;
        const scaledHeight = contentSize.height * scale;
        
        const offsetX = (containerSize.width - scaledWidth) / 2;
        const offsetY = (containerSize.height - scaledHeight) / 2;
        
        return { scale, offsetX, offsetY };
    }
    
    /**
     * üé® –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
     * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–∞–Ω–µ–ª–µ–π
     * @param {CanvasRenderingContext2D} ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas
     * @param {Object} panelData - –¥–∞–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ {x, y, width, height, type}
     * @param {number} scale - –º–∞—Å—à—Ç–∞–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {Object} options - –æ–ø—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    renderStandardPanel(ctx, panelData, scale, options = {}) {
        if (!ctx || !panelData) {
            throw new Error('BaseRenderingEngine: ctx and panelData are required');
        }
        
        const { x, y, width, height, type } = panelData;
        const {
            fillColor = null,
            strokeWidth = 2,
            showFill = false,
            showStroke = true,
            showLabel = false,
            labelText = type
        } = options;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        const proportionalStroke = this.calculateProportionalStroke(strokeWidth, scale);
        const color = fillColor || this.getPanelColor(type);
        
        ctx.save();
        
        // –ó–∞–ª–∏–≤–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        if (showFill) {
            ctx.fillStyle = color;
            ctx.fillRect(x, y, width, height);
        }
        
        // –û–±–≤–æ–¥–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        if (showStroke) {
            ctx.strokeStyle = color;
            ctx.lineWidth = proportionalStroke;
            ctx.strokeRect(x, y, width, height);
        }
        
        // –ü–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è)
        if (showLabel && this.shouldShowLabel(width, height)) {
            const fontSize = Math.max(10, 12 / scale);
            ctx.fillStyle = '#333';
            ctx.font = `${fontSize}px -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif`;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(labelText, x + width/2, y + height/2);
        }
        
        ctx.restore();
    }
    
    /**
     * üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–≤–∏–∂–∫–µ
     * @returns {Object} –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–≤–∏–∂–∫–∞
     */
    getEngineInfo() {
        return Object.freeze({
            name: 'BaseRenderingEngine',
            version: '3.1.0',
            responsibility: 'Unified rendering logic for all UI components',
            compliance: 'Cabinet DNA v3.0 + Architectural Zygote v3.1',
            constants: this._constants,
            supportedPanelTypes: Object.keys(this._panelColors)
        });
    }
    
    // ===============================================
    // üîí –ì–ï–¢–¢–ï–†–´ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
    // ===============================================
    
    get constants() {
        return Object.freeze({ ...this._constants });
    }
    
    get panelColors() {
        return Object.freeze({ ...this._panelColors });
    }
}

// ===============================================
// üè≠ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –£–¢–ò–õ–ò–¢–´
// ===============================================

/**
 * üè≠ –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–≤–∏–∂–∫–∞
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Singleton –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
 */
BaseRenderingEngine.instance = null;

BaseRenderingEngine.getInstance = () => {
    if (!BaseRenderingEngine.instance) {
        BaseRenderingEngine.instance = new BaseRenderingEngine();
    }
    return BaseRenderingEngine.instance;
};

// –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
Object.freeze(BaseRenderingEngine);
Object.freeze(BaseRenderingEngine.prototype);

console.log('üé® BaseRenderingEngine loaded - unified rendering logic established');
