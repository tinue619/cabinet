// üöÄ –õ–ï–ì–ö–û–í–ï–°–ù–´–ô –ê–î–ê–ü–¢–ï–† –î–õ–Ø –ë–´–°–¢–†–û–ô –û–¢–†–ò–°–û–í–ö–ò
// Domain Layer: –°–æ–∑–¥–∞–µ—Ç –æ–±–ª–µ–≥—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è UI

"use strict";

/**
 * üöÄ –õ–ï–ì–ö–û–í–ï–°–ù–´–ô –ê–î–ê–ü–¢–ï–† –®–ö–ê–§–ê
 * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
 * –ù–ï –∑–∞–º–µ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –∞ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –µ–µ
 */
export class LightweightCabinetAdapter {
    
    /**
     * üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–≥–∫–æ–≤–µ—Å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —à–∫–∞—Ñ–∞
     * @param {Cabinet} cabinet - –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —à–∫–∞—Ñ–∞
     * @returns {Object} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
     */
    static createLightweightRepresentation(cabinet) {
        if (!cabinet || !cabinet.isGenerated) {
            throw new Error('Cabinet must be generated before creating lightweight representation');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑
        const dimensions = cabinet.dimensions;
        const materialThickness = cabinet.materialThickness;
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å –ø–∞–Ω–µ–ª—è–º–∏
        const panels = cabinet.getPanels().map(panel => {
            console.log('üîç Creating lightweight panel:', {
                key: panel.key,
                name: panel.name,
                hasKey: panel.hasOwnProperty('key'),
                type: typeof panel.key,
                panel: panel
            });
            
            return {
                key: panel.key,
                name: panel.name,
                position: {
                    x: panel.position.x,
                    y: panel.position.y,
                    z: panel.position.z
                },
                dimensions: {
                    width: panel.dimensions.width,
                    height: panel.dimensions.height,
                    depth: panel.dimensions.depth
                },
                material: panel.material ? panel.material.name : 'Unknown'
            };
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        const sections = cabinet.getSections().map(section => ({
            id: section.id,
            bounds: section.bounds ? {
                left: section.bounds.left,
                right: section.bounds.right,
                top: section.bounds.top,
                bottom: section.bounds.bottom
            } : null
        }));
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–æ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
        return Object.freeze({
            dimensions: Object.freeze({
                width: dimensions.width,
                height: dimensions.height,
                depth: dimensions.depth,
                baseHeight: dimensions.baseHeight
            }),
            materialThickness,
            panels: Object.freeze(panels),
            sections: Object.freeze(sections),
            metadata: Object.freeze({
                panelsCount: panels.length,
                sectionsCount: sections.length,
                generatedAt: Date.now()
            })
        });
    }
    
    /**
     * üé® –ü–†–û–°–¢–ê–Ø –û–¢–†–ò–°–û–í–ö–ê –ö–ê–ö –í v2.0 - –ë–ï–ó –§–ê–°–ê–î–ê!
     * @param {CanvasRenderingContext2D} ctx 
     * @param {Object} lightweightCabinet 
     * @param {Object} transform - {scale, offsetX, offsetY, onlyFrontBase}
     */
    static renderLightweight(ctx, lightweightCabinet, transform = {}) {
        const { scale = 1, offsetX = 0, offsetY = 0, onlyFrontBase = false } = transform;
        
        console.log('üöÄ LightweightCabinetAdapter v3.4 loaded - FIXED VERSION');
        
        // üé® –ò–≥—Ä—É—à–µ—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ NAME (—Ç–∞–∫ –∫–∞–∫ key = undefined)
        const colors = {
            '–ë–æ–∫–æ–≤–∏–Ω–∞ –ª–µ–≤–∞—è': '#3498db',
            '–ë–æ–∫–æ–≤–∏–Ω–∞ –ø—Ä–∞–≤–∞—è': '#9b59b6', 
            '–ö—Ä—ã—à–∞': '#e74c3c',
            '–î–Ω–æ': '#f39c12',
            '–¶–æ–∫–æ–ª—å –ø–µ—Ä–µ–¥–Ω–∏–π': '#2ecc71',
            '–¶–æ–∫–æ–ª—å –∑–∞–¥–Ω–∏–π': '#34495e',
            '–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞': '#f1c40f'
        };
        
        // üè† –û–¢–†–ò–°–û–í–ö–ê –û–ë–©–ï–ì–û –ö–û–ù–¢–£–†–ê –ö–ê–ö –í v2.0
        const cabinetWidth = lightweightCabinet.dimensions.width * scale;
        const cabinetHeight = lightweightCabinet.dimensions.height * scale;
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—É—Ä —à–∫–∞—Ñ–∞
        ctx.strokeStyle = '#2c3e50';
        ctx.lineWidth = 2;
        ctx.strokeRect(offsetX, offsetY, cabinetWidth, cabinetHeight);
        
        // üé® –§–û–ù –í–ù–£–¢–†–ò –®–ö–ê–§–ê
        ctx.fillStyle = '#ecf0f1';
        ctx.fillRect(offsetX, offsetY, cabinetWidth, cabinetHeight);
        
        // ‚ö° –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–µ–π (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è 2D)
        for (let i = 0; i < lightweightCabinet.panels.length; i++) {
            const panel = lightweightCabinet.panels[i];
            
            // üéØ –§–ò–õ–¨–¢–† –ü–û NAME –í–ú–ï–°–¢–û KEY (—Ç–∞–∫ –∫–∞–∫ key = undefined)
            console.log('üîç Checking panel:', panel.name, 'onlyFrontBase:', onlyFrontBase);
            
            if (onlyFrontBase) {
                // –£–±–∏—Ä–∞–µ–º –∑–∞–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ NAME
                if (panel.name === '–¶–æ–∫–æ–ª—å –∑–∞–¥–Ω–∏–π' || panel.name === '–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞' || panel.name === '–§–∞—Å–∞–¥') {
                    console.log('üö´ Skipping panel:', panel.name, '(filtered out by NAME)');
                    continue;
                }
            }
            
            console.log('‚úÖ Rendering panel:', panel.name, 'dimensions:', panel.dimensions);
            
            const x = offsetX + panel.position.x * scale;
            const y = offsetY + panel.position.y * scale;
            const w = panel.dimensions.width * scale;
            const h = panel.dimensions.height * scale;
            
            // üé® –£–õ–£–ß–®–ï–ù–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –¢–û–ù–ö–ò–• –ü–ê–ù–ï–õ–ï–ô
            let displayWidth = w;
            let displayHeight = h;
            
            // –î–ª—è –æ—á–µ–Ω—å —Ç–æ–Ω–∫–∏—Ö –ø–∞–Ω–µ–ª–µ–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            const minDisplaySize = 2; // –º–∏–Ω–∏–º—É–º 2px –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            if (displayWidth < minDisplaySize) displayWidth = minDisplaySize;
            if (displayHeight < minDisplaySize) displayHeight = minDisplaySize;
            
            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            ctx.fillStyle = colors[panel.name] || '#bdc3c7';
            ctx.fillRect(x, y, displayWidth, displayHeight);
            
            // –ö–æ–Ω—Ç—É—Ä —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            ctx.strokeStyle = '#2c3e50';
            ctx.lineWidth = 1;
            ctx.strokeRect(x, y, displayWidth, displayHeight);
            
            // üé® –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–ö–ê–ù–¢–û–í–ö–ê –ü–û NAME
            if (panel.name === '–ë–æ–∫–æ–≤–∏–Ω–∞ –ª–µ–≤–∞—è' || panel.name === '–ë–æ–∫–æ–≤–∏–Ω–∞ –ø—Ä–∞–≤–∞—è') {
                // üü¶ –ë–æ–∫–æ–≤–∏–Ω—ã - —Å–∏–Ω—è—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∞
                ctx.strokeStyle = '#34495e';
                ctx.lineWidth = 2;
                ctx.strokeRect(x-1, y-1, displayWidth+2, displayHeight+2);
            }
            
            if (panel.name === '–ö—Ä—ã—à–∞' || panel.name === '–î–Ω–æ') {
                // üüß –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ - –∫—Ä–∞—Å–Ω–∞—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∞
                ctx.strokeStyle = '#c0392b';
                ctx.lineWidth = 2;
                ctx.strokeRect(x-1, y-1, displayWidth+2, displayHeight+2);
            }
            
            if (panel.name === '–¶–æ–∫–æ–ª—å –ø–µ—Ä–µ–¥–Ω–∏–π') {
                // üü© –ü–µ—Ä–µ–¥–Ω–∏–π —Ü–æ–∫–æ–ª—å - –∑–µ–ª–µ–Ω–∞—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∞
                ctx.strokeStyle = '#27ae60';
                ctx.lineWidth = 2;
                ctx.strokeRect(x-1, y-1, displayWidth+2, displayHeight+2);
            }
            
            // üìù –ü–æ–¥–ø–∏—Å—å –ø–∞–Ω–µ–ª–∏ (–µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è)
            if (w > 60 && h > 30) {
                ctx.fillStyle = '#2c3e50';
                ctx.font = `${Math.min(12, Math.max(8, w/10))}px -apple-system, BlinkMacSystemFont, 'SF Pro Display', sans-serif`;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                
                const text = panel.name.replace(/\s+/g, ' ');
                ctx.fillText(text, x + w/2, y + h/2);
            }
        }
        
        // üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–π (–±–µ–∑ –ø—É–Ω–∫—Ç–∏—Ä–∞)
        if (lightweightCabinet.sections.length > 0) {
            // üü¶ –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
            ctx.fillStyle = 'rgba(74, 158, 255, 0.05)';
            for (let i = 0; i < lightweightCabinet.sections.length; i++) {
                const section = lightweightCabinet.sections[i];
                if (section.bounds) {
                    const bounds = section.bounds;
                    const x = offsetX + bounds.left * scale;
                    const y = offsetY + bounds.top * scale;
                    const w = (bounds.right - bounds.left) * scale;
                    const h = (bounds.bottom - bounds.top) * scale;
                    ctx.fillRect(x, y, w, h);
                }
            }
        }
    }
    
    /**
     * üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è canvas
     * @param {Object} lightweightCabinet 
     * @param {number} canvasWidth 
     * @param {number} canvasHeight 
     * @param {number} padding 
     * @returns {Object} {scale, offsetX, offsetY}
     */
    static calculateOptimalTransform(lightweightCabinet, canvasWidth, canvasHeight, padding = 50) {
        const availableWidth = canvasWidth - 2 * padding;
        const availableHeight = canvasHeight - 2 * padding;
        
        const cabinetWidth = lightweightCabinet.dimensions.width;
        const cabinetHeight = lightweightCabinet.dimensions.height;
        
        const scale = Math.min(
            availableWidth / cabinetWidth,
            availableHeight / cabinetHeight
        );
        
        const scaledWidth = cabinetWidth * scale;
        const scaledHeight = cabinetHeight * scale;
        
        const offsetX = (canvasWidth - scaledWidth) / 2;
        const offsetY = (canvasHeight - scaledHeight) / 2;
        
        return { scale, offsetX, offsetY };
    }
}

console.log('üöÄ LightweightCabinetAdapter v3.5-DEBUG loaded - FINAL FIX');