/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Mobile UI Manager
 * –í–µ—Ä—Å–∏—è 2.0 - –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
 */

class MobileUIManager {
  constructor() {
    this.isInitialized = false;
    this.isExpanded = false;
    this.settingsOpen = false;
    this.editMode = false;
    this.deleteMode = false;
    this.selectedElement = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    if (!this.isMobileDevice()) {
      return;
    }
    
    this.init();
  }

  init() {
    if (this.isInitialized) return;

    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ UI...');
    
    this.setupViewport();
    this.loadMobileStyles();
    this.createMobileElements();
    this.setupEventListeners();
    this.optimizeForMobile();
    
    this.isInitialized = true;
    console.log('‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–π UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // =========================== 
  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
  // ===========================

  setupViewport() {
    let viewport = document.querySelector('meta[name="viewport"]');
    if (!viewport) {
      viewport = document.createElement('meta');
      viewport.name = 'viewport';
      document.head.appendChild(viewport);
    }
    viewport.content = 'width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover';
  }

  loadMobileStyles() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
    if (!document.getElementById('mobile-optimized-styles')) {
      const link = document.createElement('link');
      link.id = 'mobile-optimized-styles';
      link.rel = 'stylesheet';
      link.href = 'css/mobile-optimized.css';
      document.head.appendChild(link);
    }
  }

  createMobileElements() {
    this.createToolbar();
    this.createSettingsPanel();
    this.createNotifications();
    this.createOverlay();
    this.createSwipeIndicator();
  }

  // =========================== 
  // –°–û–ó–î–ê–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–û–í
  // ===========================

  createToolbar() {
    if (document.querySelector('.mobile-toolbar')) {
      console.log('–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }
    
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...');
    
    const toolbar = document.createElement('div');
    toolbar.className = 'mobile-toolbar';
    toolbar.innerHTML = `
      <button class="mobile-tool-btn" data-tool="shelf" title="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–∫—É">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12h18"/>
        </svg>
        <span>–ü–æ–ª–∫–∞</span>
      </button>
      
      <button class="mobile-tool-btn" data-tool="stand" title="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–π–∫—É">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v18"/>
        </svg>
        <span>–°—Ç–æ–π–∫–∞</span>
      </button>
      
      <button class="mobile-tool-btn" data-tool="rod" title="–î–æ–±–∞–≤–∏—Ç—å —à—Ç–∞–Ω–≥—É">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14"/>
          <circle cx="19" cy="12" r="1" stroke="currentColor" fill="none"/>
          <circle cx="5" cy="12" r="1" stroke="currentColor" fill="none"/>
        </svg>
        <span>–®—Ç–∞–Ω–≥–∞</span>
      </button>
      
      <button class="mobile-tool-btn" data-tool="edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125"/>
        </svg>
        <span>–†–µ–¥–∞–∫—Ç.</span>
      </button>
      
      <button class="mobile-tool-btn" data-tool="delete" title="–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"/>
        </svg>
        <span>–£–¥–∞–ª–∏—Ç—å</span>
      </button>
      
      <button class="mobile-tool-btn mobile-tool-btn-hidden" data-tool="undo" title="–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3"/>
        </svg>
        <span>–û—Ç–º–µ–Ω–∞</span>
      </button>
      
      <button class="mobile-tool-btn" data-tool="settings" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∫–∞—Ñ–∞">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 0 0-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 0 0-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 0 0-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 0 0-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 0 0 1.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065Z"/>
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"/>
        </svg>
        <span>–ì–∞–±–∞—Ä–∏—Ç—ã</span>
      </button>
      
      <button class="mobile-expand-btn" data-tool="expand" title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–∞–Ω–µ–ª—å">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.5 8.25l-7.5 7.5-7.5-7.5"/>
        </svg>
      </button>
      
      <!-- –°–∫—Ä—ã—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ (–ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏) -->
      <button class="mobile-tool-btn mobile-tool-btn-hidden" data-tool="view" title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"/>
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7Z"/>
        </svg>
        <span>–í–∏–¥</span>
      </button>
      
      <button class="mobile-tool-btn mobile-tool-btn-hidden" data-tool="redo" title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 15l6-6m0 0l-6-6m6 6H9a6 6 0 000 12h3"/>
        </svg>
        <span>–ü–æ–≤—Ç–æ—Ä</span>
      </button>
      
      <button class="mobile-tool-btn mobile-tool-btn-hidden" data-tool="dimensions" title="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã">
        <svg fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7.5 21L3 16.5m0 0L7.5 12M3 16.5h13.5m0-13.5L21 7.5m0 0L16.5 12M21 7.5H7.5"/>
        </svg>
        <span>–†–∞–∑–º–µ—Ä—ã</span>
      </button>
    `;

    document.body.appendChild(toolbar);
    console.log('üî® –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏—Å—å
    const createdBtns = toolbar.querySelectorAll('.mobile-tool-btn');
    console.log('üî® –°–æ–∑–¥–∞–Ω–æ –∫–Ω–æ–ø–æ–∫:', createdBtns.length);
    createdBtns.forEach((btn, i) => {
      console.log(`üî® –ö–Ω–æ–ø–∫–∞ ${i}:`, btn.dataset.tool);
    });
  }
  }

  createSettingsPanel() {
    if (document.querySelector('.mobile-settings-panel')) {
      console.log('–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }
    
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    
    const panel = document.createElement('div');
    panel.className = 'mobile-settings-panel';
    panel.innerHTML = `
      <div class="mobile-settings-header">
        <h3>–ì–∞–±–∞—Ä–∏—Ç—ã —à–∫–∞—Ñ–∞</h3>
        <button class="mobile-close-btn" title="–ó–∞–∫—Ä—ã—Ç—å">
          <svg fill="none" viewBox="0 0 24 24">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      <div class="mobile-settings-content">
        <div class="control-group">
          <label class="control-label">–®–∏—Ä–∏–Ω–∞ (–º–º)</label>
          <input type="number" id="mobile-width" class="input-field" value="800" min="132" max="2000">
        </div>
        
        <div class="control-group">
          <label class="control-label">–í—ã—Å–æ—Ç–∞ (–º–º)</label>
          <input type="number" id="mobile-height" class="input-field" value="1800" min="132" max="3000">
        </div>
        
        <div class="control-group">
          <label class="control-label">–ì–ª—É–±–∏–Ω–∞ (–º–º)</label>
          <input type="number" id="mobile-depth" class="input-field" value="500" min="100" max="1000">
        </div>
        
        <div class="control-group">
          <label class="control-label">–¶–æ–∫–æ–ª—å (–º–º)</label>
          <input type="number" id="mobile-base" class="input-field" value="100" min="60" max="200">
        </div>
        
        <div class="control-group">
          <button id="mobile-apply" class="btn-primary">
            <svg fill="none" viewBox="0 0 24 24" style="width: 20px; height: 20px; margin-right: 8px;">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m4.5 12.75 6 6 9-13.5"/>
            </svg>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
          </button>
        </div>
      </div>
    `;

    document.body.appendChild(panel);
    console.log('–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
  }

  createNotifications() {
    if (document.querySelector('.mobile-notifications')) return;
    
    const notifications = document.createElement('div');
    notifications.className = 'mobile-notifications';
    document.body.appendChild(notifications);
  }

  createOverlay() {
    if (document.querySelector('.mobile-settings-overlay')) {
      console.log('–û–≤–µ—Ä–ª–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }
    
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è...');
    
    const overlay = document.createElement('div');
    overlay.className = 'mobile-settings-overlay';
    document.body.appendChild(overlay);
    
    console.log('–û–≤–µ—Ä–ª–µ–π —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω');
  }

  createSwipeIndicator() {
    if (document.querySelector('.swipe-indicator')) return;
    
    const indicator = document.createElement('div');
    indicator.className = 'swipe-indicator pulse';
    indicator.title = '–°–≤–∞–π–ø–Ω–∏—Ç–µ –≤–ª–µ–≤–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫';
    document.body.appendChild(indicator);
    
    // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    setTimeout(() => {
      indicator.classList.remove('pulse');
    }, 5000);
  }

  // =========================== 
  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  // ===========================

  setupEventListeners() {
    console.log('üëÜ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    document.body.addEventListener('click', (e) => {
      console.log('üëÜ –ö–ª–∏–∫ –ø–æ:', e.target);
      
      const toolBtn = e.target.closest('.mobile-tool-btn');
      const expandBtn = e.target.closest('.mobile-expand-btn');
      
      if (toolBtn && toolBtn.dataset.tool) {
        console.log('üëÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å tool:', toolBtn.dataset.tool);
        e.preventDefault();
        e.stopPropagation();
        this.handleToolClick(toolBtn.dataset.tool, toolBtn);
        return;
      }
      
      if (expandBtn && expandBtn.dataset.tool === 'expand') {
        console.log('üëÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞');
        e.preventDefault();
        e.stopPropagation();
        this.handleToolClick('expand', expandBtn);
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
      if (e.target.closest('.mobile-close-btn')) {
        e.preventDefault();
        this.closeSettings();
        return;
      }
      
      if (e.target.closest('.mobile-settings-overlay')) {
        e.preventDefault();
        this.closeSettings();
        return;
      }
      
      if (e.target.closest('#mobile-apply')) {
        e.preventDefault();
        this.applySettings();
        return;
      }
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    this.syncInputs();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    window.addEventListener('orientationchange', () => {
      setTimeout(() => this.handleOrientationChange(), 100);
    });
  }

  syncInputs() {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏
    const pairs = [
      ['width', 'mobile-width'],
      ['height', 'mobile-height'],
      ['depth', 'mobile-depth'],
      ['base', 'mobile-base']
    ];

    pairs.forEach(([mainId, mobileId]) => {
      const mainInput = document.getElementById(mainId);
      const mobileInput = document.getElementById(mobileId);
      
      if (mainInput && mobileInput) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        mobileInput.value = mainInput.value;
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        mainInput.addEventListener('input', () => {
          mobileInput.value = mainInput.value;
        });
        
        mobileInput.addEventListener('input', () => {
          mainInput.value = mobileInput.value;
        });
      }
    });
  }

  // =========================== 
  // –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ô–°–¢–í–ò–ô
  // ===========================

  handleToolClick(tool, button) {
    console.log('üîß handleToolClick –≤—ã–∑–≤–∞–Ω —Å:', { tool, button, app: window.app, setMode: window.setMode });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.mobile-tool-btn').forEach(btn => {
      btn.classList.remove('active');
    });

    switch (tool) {
      case 'shelf':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ shelf');
        this.activateTool('shelf', button);
        break;
        
      case 'stand':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ stand');
        this.activateTool('stand', button);
        break;
        
      case 'rod':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ rod');
        this.activateTool('rod', button);
        break;
        
      case 'edit':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ edit');
        this.activateEditMode(button);
        break;
        
      case 'delete':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ delete');
        this.activateDeleteMode(button);
        break;
        
      case 'undo':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ undo');
        this.executeUndo();
        break;
        
      case 'redo':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ redo');
        this.executeRedo();
        break;
        
      case 'view':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ view');
        this.toggleView();
        break;
        
      case 'dimensions':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ dimensions');
        this.toggleDimensions(button);
        break;
        
      case 'settings':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ settings');
        this.openSettings();
        break;
        
      case 'expand':
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ expand');
        this.toggleExpand();
        break;
        
      default:
        console.log('üîß –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:', tool);
    }
  }

  activateTool(mode, button) {
    console.log('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', mode);
    
    if (window.app && window.setMode) {
      window.setMode(mode);
      button.classList.add('active');
      
      const modeText = {
        'shelf': '–ø–æ–ª–∫–∏',
        'stand': '—Å—Ç–æ–π–∫–∏',
        'rod': '—à—Ç–∞–Ω–≥–∏'
      };
      
      this.showNotification(`–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${modeText[mode] || mode} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–µ–∫—Ü–∏—é —à–∫–∞—Ñ–∞.`);
    } else {
      console.error('–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ');
      this.showNotification('–û—à–∏–±–∫–∞: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    }
  }

  executeUndo() {
    if (window.app && window.app.undo) {
      window.app.undo();
      this.showNotification('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    }
  }

  // =========================== 
  // –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ò –£–î–ê–õ–ï–ù–ò–Ø
  // ===========================

  createEditPanel() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    this.removeEditPanel();
    
    const editPanel = document.createElement('div');
    editPanel.className = 'mobile-edit-panel show';
    editPanel.innerHTML = `
      <div class="edit-panel-header">
        <h4>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞</h4>
        <button class="edit-panel-close">
          <svg fill="none" viewBox="0 0 24 24">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      <div class="edit-panel-content">
        <p class="edit-instruction">–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
        <div class="edit-controls" id="editControls" style="display: none;">
          <div class="control-group">
            <label>–ü–æ–∑–∏—Ü–∏—è:</label>
            <div class="position-controls">
              <button class="btn-control" data-action="move-left">‚Üê</button>
              <button class="btn-control" data-action="move-right">‚Üí</button>
              <button class="btn-control" data-action="move-up">‚Üë</button>
              <button class="btn-control" data-action="move-down">‚Üì</button>
            </div>
          </div>
          <div class="control-group">
            <button class="btn-danger" data-action="delete">–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç</button>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(editPanel);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    editPanel.querySelector('.edit-panel-close').addEventListener('click', () => {
      this.closeEditMode();
    });
    
    editPanel.querySelectorAll('[data-action]').forEach(btn => {
      btn.addEventListener('click', (e) => {
        this.handleEditAction(e.target.dataset.action);
      });
    });
  }

  removeEditPanel() {
    const existingPanel = document.querySelector('.mobile-edit-panel');
    if (existingPanel) {
      existingPanel.remove();
    }
  }

  closeEditMode() {
    this.deactivateAllModes();
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editBtn = document.querySelector('[data-tool="edit"]');
    if (editBtn) {
      editBtn.classList.remove('active');
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    if (window.app && window.setMode) {
      window.setMode('none');
    }
  }

  selectElementForEdit(element) {
    this.selectedElement = element;
    
    const editControls = document.getElementById('editControls');
    const instruction = document.querySelector('.edit-instruction');
    
    if (editControls && instruction) {
      instruction.textContent = `–í—ã–±—Ä–∞–Ω: ${element.displayName || '–≠–ª–µ–º–µ–Ω—Ç'}`;
      editControls.style.display = 'block';
    }
    
    this.showNotification(`–í—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç: ${element.displayName || '–≠–ª–µ–º–µ–Ω—Ç'}`);
  }

  handleEditAction(action) {
    if (!this.selectedElement) {
      this.showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    console.log('–î–µ–π—Å—Ç–≤–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', action, '–¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:', this.selectedElement);
    
    switch (action) {
      case 'move-left':
        this.moveElement(this.selectedElement, -10, 0);
        break;
      case 'move-right':
        this.moveElement(this.selectedElement, 10, 0);
        break;
      case 'move-up':
        this.moveElement(this.selectedElement, 0, 10);
        break;
      case 'move-down':
        this.moveElement(this.selectedElement, 0, -10);
        break;
      case 'delete':
        this.deleteElement(this.selectedElement);
        break;
    }
  }

  moveElement(element, deltaX, deltaY) {
    if (window.app && window.app.moveElement) {
      window.app.moveElement(element, deltaX, deltaY);
      this.showNotification('–≠–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω');
    } else {
      console.error('–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç');
    }
  }

  deleteElement(element) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç?')) {
      if (window.app && window.app.deleteElement) {
        window.app.deleteElement(element);
        this.selectedElement = null;
        this.closeEditMode();
        this.showNotification('–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
      } else {
        console.error('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç');
      }
    }
  }

  handleElementClick(element) {
    if (this.editMode) {
      this.selectElementForEdit(element);
    } else if (this.deleteMode) {
      this.deleteElement(element);
    }
  }

  executeRedo() {
    console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞');
    if (window.redo) {
      window.redo();
      this.showNotification('–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ');
    } else {
      console.error('–§—É–Ω–∫—Ü–∏—è redo –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ');
    }
  }

  toggleView() {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞');
    if (window.switchView) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥
      const view2d = document.getElementById('view2d');
      const view3d = document.getElementById('view3d');
      
      if (view2d && view3d) {
        if (view2d.classList.contains('active')) {
          window.switchView('3d');
          this.showNotification('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ 3D –≤–∏–¥');
        } else {
          window.switchView('2d');
          this.showNotification('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ 2D –≤–∏–¥');
        }
      }
    } else {
      console.error('–§—É–Ω–∫—Ü–∏—è switchView –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥');
    }
  }

  toggleDimensions(button) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤');
    if (window.toggleDimensions) {
      window.toggleDimensions();
      const isActive = button.classList.toggle('active');
      this.showNotification(isActive ? '–†–∞–∑–º–µ—Ä—ã –ø–æ–∫–∞–∑–∞–Ω—ã' : '–†–∞–∑–º–µ—Ä—ã —Å–∫—Ä—ã—Ç—ã');
    } else {
      console.error('–§—É–Ω–∫—Ü–∏—è toggleDimensions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã');
    }
  }

  toggleExpand() {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–∞–Ω–µ–ª–∏');
    
    const toolbar = document.querySelector('.mobile-toolbar');
    const expandBtn = document.querySelector('.mobile-expand-btn');
    
    if (!toolbar || !expandBtn) {
      console.error('–ü–∞–Ω–µ–ª—å –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    this.isExpanded = !this.isExpanded;
    
    if (this.isExpanded) {
      toolbar.classList.add('expanded');
      console.log('–ü–∞–Ω–µ–ª—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞');
      this.showNotification('–ü–∞–Ω–µ–ª—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ - –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã');
    } else {
      toolbar.classList.remove('expanded');
      console.log('–ü–∞–Ω–µ–ª—å —Å–≤–µ—Ä–Ω—É—Ç–∞');
      this.showNotification('–ü–∞–Ω–µ–ª—å —Å–≤–µ—Ä–Ω—É—Ç–∞');
    }
  }

  openSettings() {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–Ω–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const panel = document.querySelector('.mobile-settings-panel');
    const overlay = document.querySelector('.mobile-settings-overlay');
    
    if (!panel) {
      console.error('–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å
      this.createSettingsPanel();
      this.createOverlay();
    }
    
    if (!overlay) {
      console.error('–û–≤–µ—Ä–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      this.createOverlay();
    }
    
    this.settingsOpen = true;
    document.body.classList.add('mobile-settings-open');
    
    console.log('–ö–ª–∞—Å—Å mobile-settings-open –¥–æ–±–∞–≤–ª–µ–Ω –∫ body');
    this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–±–∞—Ä–∏—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç—ã');
  }

  closeSettings() {
    this.settingsOpen = false;
    document.body.classList.remove('mobile-settings-open');
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settingsBtn = document.querySelector('[data-tool="settings"]');
    if (settingsBtn) {
      settingsBtn.classList.remove('active');
    }
  }

  applySettings() {
    console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    if (window.applyDimensions) {
      window.applyDimensions();
      this.closeSettings();
      this.showNotification('–ì–∞–±–∞—Ä–∏—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.error('–§—É–Ω–∫—Ü–∏—è applyDimensions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
  }

  // =========================== 
  // –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
  // ===========================

  showNotification(message, duration = 2500) {
    const container = document.querySelector('.mobile-notifications');
    if (!container) return;
    
    const notification = document.createElement('div');
    notification.className = 'mobile-notification';
    notification.textContent = message;
    
    container.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, duration);
  }

  // =========================== 
  // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
  // ===========================

  optimizeForMobile() {
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    document.addEventListener('contextmenu', (e) => {
      if (e.target.closest('#canvas')) {
        e.preventDefault();
      }
    });

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º zoom –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º —Ç–∞–ø–µ
    let lastTouchEnd = 0;
    document.addEventListener('touchend', (event) => {
      const now = (new Date()).getTime();
      if (now - lastTouchEnd <= 300) {
        event.preventDefault();
      }
      lastTouchEnd = now;
    }, false);

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º canvas –¥–ª—è touch
    const canvas = document.getElementById('canvas');
    if (canvas) {
      canvas.style.touchAction = 'none';
    }
  }

  handleOrientationChange() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    setTimeout(() => {
      if (window.app && window.app.renderer2d && window.app.renderer2d.updateCanvas) {
        window.app.renderer2d.updateCanvas();
      }
    }, 300);
  }

  // =========================== 
  // –û–¢–õ–ê–î–ö–ê –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
  // ===========================
  
  // =========================== 
  // –û–¢–õ–ê–î–ö–ê –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
  // ===========================
  
  testOpenSettings() {
    this.openSettings();
  }
  
  testCloseSettings() {
    this.closeSettings();
  }

  testEditMode() {
    console.log('üß™ –¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const editBtn = document.querySelector('[data-tool="edit"]');
    console.log('üß™ –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', editBtn);
    
    if (editBtn) {
      console.log('üß™ –í—ã–∑—ã–≤–∞–µ–º handleToolClick –Ω–∞–ø—Ä—è–º—É—é');
      this.handleToolClick('edit', editBtn);
    } else {
      console.error('üß™ –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–±–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      const allMobileBtns = document.querySelectorAll('.mobile-tool-btn');
      console.log('üß™ –í—Å–µ –º–æ–±–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:', allMobileBtns);
      allMobileBtns.forEach((btn, i) => {
        console.log(`üß™ –ö–Ω–æ–ø–∫–∞ ${i}:`, btn, 'data-tool:', btn.dataset.tool);
      });
    }
  }

  testDeleteMode() {
    const deleteBtn = document.querySelector('[data-tool="delete"]');
    if (deleteBtn) {
      this.handleToolClick('delete', deleteBtn);
    }
  }

  isMobileDevice() {
    const isMobile = window.innerWidth <= 768 || 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', {
      innerWidth: window.innerWidth,
      hasTouch: 'ontouchstart' in window,
      maxTouchPoints: navigator.maxTouchPoints,
      isMobile: isMobile
    });
    return isMobile;
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
  destroy() {
    const mobileElements = document.querySelectorAll(
      '.mobile-toolbar, .mobile-settings-panel, .mobile-notifications, .mobile-settings-overlay'
    );
    mobileElements.forEach(el => el.remove());
    
    const mobileStyles = document.getElementById('mobile-optimized-styles');
    if (mobileStyles) {
      mobileStyles.remove();
    }
    
    this.isInitialized = false;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
  module.exports = MobileUIManager;
} else {
  window.MobileUIManager = MobileUIManager;
}
