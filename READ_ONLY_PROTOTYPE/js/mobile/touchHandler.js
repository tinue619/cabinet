/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Touch Handler —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
 * –í–µ—Ä—Å–∏—è 3.0 - –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */

class TouchHandler {
  constructor(app) {
    this.app = app;
    this.canvas = document.getElementById('canvas');
    this.isInitialized = false;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ touch
    this.touches = new Map();
    this.lastTouch = null;
    this.gestureStartTime = 0;
    this.gestureTimeout = null;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∂–µ—Å—Ç–æ–≤
    this.tapThreshold = 150; // –º—Å
    this.moveThreshold = 10; // –ø–∏–∫—Å–µ–ª–µ–π
    this.swipeThreshold = 50; // –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è —Å–≤–∞–π–ø–∞
    this.swipeVelocityThreshold = 0.5; // –ø–∏–∫—Å–µ–ª–µ–π/–º—Å
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    this.editMode = false;
    this.deleteMode = false;
    this.selectedElement = null;
    this.dragOffset = { x: 0, y: 0 };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É touch
    if ('ontouchstart' in window) {
      this.init();
    }
  }

  init() {
    if (this.isInitialized || !this.canvas) return;
    
    console.log('ü§è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Touch Handler v3.0...');
    
    this.setupTouchEvents();
    this.setupSwipeGestures();
    this.createTouchIndicators();
    
    this.isInitialized = true;
    console.log('‚úÖ Touch Handler v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // =========================== 
  // –ù–ê–°–¢–†–û–ô–ö–ê –°–û–ë–´–¢–ò–ô
  // ===========================

  setupTouchEvents() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ touch —Å–æ–±—ã—Ç–∏—è
    this.canvas.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: false });
    this.canvas.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive: false });
    this.canvas.addEventListener('touchend', (e) => this.handleTouchEnd(e), { passive: false });
    this.canvas.addEventListener('touchcancel', (e) => this.handleTouchCancel(e), { passive: false });

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∂–µ—Å—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞
    this.canvas.addEventListener('gesturestart', (e) => e.preventDefault());
    this.canvas.addEventListener('gesturechange', (e) => e.preventDefault());
    this.canvas.addEventListener('gestureend', (e) => e.preventDefault());
  }

  setupSwipeGestures() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    let startX = 0;
    let startY = 0;
    let startTime = 0;
    
    document.addEventListener('touchstart', (e) => {
      if (e.touches.length === 1) {
        const touch = e.touches[0];
        startX = touch.clientX;
        startY = touch.clientY;
        startTime = Date.now();
      }
    }, { passive: true });

    document.addEventListener('touchend', (e) => {
      if (e.changedTouches.length === 1) {
        const touch = e.changedTouches[0];
        const endX = touch.clientX;
        const endY = touch.clientY;
        const endTime = Date.now();
        
        const deltaX = endX - startX;
        const deltaY = endY - startY;
        const deltaTime = endTime - startTime;
        const velocity = Math.abs(deltaX) / deltaTime;
        
        // –°–≤–∞–π–ø –≤–ª–µ–≤–æ —Å –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞
        if (startX > window.innerWidth - 50 && 
            deltaX < -this.swipeThreshold && 
            Math.abs(deltaY) < 100 && 
            velocity > this.swipeVelocityThreshold) {
          
          if (window.mobileUI && !window.mobileUI.settingsOpen) {
            window.mobileUI.openSettings();
          }
        }
        
        // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
        if (window.mobileUI && window.mobileUI.settingsOpen && 
            deltaX > this.swipeThreshold && 
            Math.abs(deltaY) < 100) {
          window.mobileUI.closeSettings();
        }
      }
    }, { passive: true });
  }

  createTouchIndicators() {
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã touch –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    this.touchIndicator = document.createElement('div');
    this.touchIndicator.className = 'touch-indicator';
    document.body.appendChild(this.touchIndicator);
  }

  // =========================== 
  // –û–ë–†–ê–ë–û–¢–ö–ê TOUCH –°–û–ë–´–¢–ò–ô
  // ===========================

  handleTouchStart(e) {
    e.preventDefault();
    
    const touches = Array.from(e.touches);
    this.gestureStartTime = Date.now();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ touch
    touches.forEach(touch => {
      this.touches.set(touch.identifier, {
        startX: touch.clientX,
        startY: touch.clientY,
        currentX: touch.clientX,
        currentY: touch.clientY,
        startTime: this.gestureStartTime
      });
    });

    this.showTouchIndicator(touches[0].clientX, touches[0].clientY);

    if (touches.length === 1) {
      this.handleSingleTouchStart(touches[0]);
    } else if (touches.length === 2) {
      this.handleMultiTouchStart(touches);
    }
  }

  handleTouchMove(e) {
    e.preventDefault();
    
    const touches = Array.from(e.touches);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ touch
    touches.forEach(touch => {
      if (this.touches.has(touch.identifier)) {
        const touchData = this.touches.get(touch.identifier);
        touchData.currentX = touch.clientX;
        touchData.currentY = touch.clientY;
      }
    });

    if (touches.length === 1) {
      this.handleSingleTouchMove(touches[0]);
    } else if (touches.length === 2) {
      this.handleMultiTouchMove(touches);
    }

    this.updateTouchIndicator(touches[0].clientX, touches[0].clientY);
  }

  handleTouchEnd(e) {
    e.preventDefault();
    
    const touches = Array.from(e.changedTouches);
    const remainingTouches = Array.from(e.touches);
    
    touches.forEach(touch => {
      if (this.touches.has(touch.identifier)) {
        const touchData = this.touches.get(touch.identifier);
        const duration = Date.now() - touchData.startTime;
        const distance = this.calculateDistance(
          touchData.startX, touchData.startY,
          touch.clientX, touch.clientY
        );
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∂–µ—Å—Ç–∞
        if (duration < this.tapThreshold && distance < this.moveThreshold) {
          this.handleTap(touch);
        }
        
        this.touches.delete(touch.identifier);
      }
    });

    this.hideTouchIndicator();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç touch
    if (remainingTouches.length === 0) {
      this.resetTouchState();
    }
  }

  handleTouchCancel(e) {
    e.preventDefault();
    this.resetTouchState();
    this.hideTouchIndicator();
  }

  // =========================== 
  // –û–ë–†–ê–ë–û–¢–ö–ê –ñ–ï–°–¢–û–í
  // ===========================

  handleSingleTouchStart(touch) {
    // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º drag –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    console.log('Single touch start');
  }

  handleSingleTouchMove(touch) {
    // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º drag –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    console.log('Single touch move');
  }

  handleMultiTouchStart(touches) {
    // –î–≤—É—Ö–ø–∞–ª—å—Ü–µ–≤—ã–µ –∂–µ—Å—Ç—ã –¥–ª—è 3D –≤–∏–¥–∞
    if (touches.length === 2) {
      const distance = this.calculateDistance(
        touches[0].clientX, touches[0].clientY,
        touches[1].clientX, touches[1].clientY
      );
      
      this.initialPinchDistance = distance;
      this.lastPinchDistance = distance;
    }
  }

  handleMultiTouchMove(touches) {
    if (touches.length === 2 && this.initialPinchDistance) {
      const currentDistance = this.calculateDistance(
        touches[0].clientX, touches[0].clientY,
        touches[1].clientX, touches[1].clientY
      );
      
      const scale = currentDistance / this.initialPinchDistance;
      const deltaScale = currentDistance / this.lastPinchDistance;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è 3D –≤–∏–¥–∞
      if (this.app && this.app.renderer3d && this.app.currentView === '3d') {
        this.app.renderer3d.handlePinch(deltaScale);
      }
      
      this.lastPinchDistance = currentDistance;
    }
  }

  handleTap(touch) {
    const rect = this.canvas.getBoundingClientRect();
    const canvasX = touch.clientX - rect.left;
    const canvasY = touch.clientY - rect.top;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const appCoords = this.convertCanvasToAppCoords(canvasX, canvasY);
    
    console.log('ü§è Touch tap –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö:', { canvasX, canvasY, appCoords });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω
    const activeTool = document.querySelector('.mobile-tool-btn.active');
    if (activeTool) {
      const toolType = activeTool.dataset.tool;
      console.log('–ê–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:', toolType);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
      if (toolType === 'edit' || toolType === 'delete') {
        const element = this.app && this.app.findElementAt ? this.app.findElementAt(canvasX, canvasY) : null;
        if (element) {
          if (toolType === 'edit') {
            this.handleElementEdit(element);
          } else if (toolType === 'delete') {
            this.handleElementDelete(element);
          }
          return;
        } else {
          if (window.mobileUI) {
            window.mobileUI.showNotification('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–∫—É –∏–ª–∏ —Å—Ç–æ–π–∫—É.');
          }
          return;
        }
      }
    }
    
    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–ø–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.forwardTapToApp(appCoords.x, appCoords.y);
  }

  // =========================== 
  // –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ò –£–î–ê–õ–ï–ù–ò–Ø
  // ===========================

  handleElementEdit(element) {
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', element);
    
    if (window.mobileUI && window.mobileUI.editMode) {
      window.mobileUI.selectElementForEdit(element);
    }
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    this.highlightElement(element);
    
    if (window.mobileUI) {
      window.mobileUI.showNotification(`–≠–ª–µ–º–µ–Ω—Ç ${element.displayName || '–≤—ã–±—Ä–∞–Ω'} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
    }
  }

  handleElementDelete(element) {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', element);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    this.showDeleteConfirmation(element);
  }

  showDeleteConfirmation(element) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingDialog = document.querySelector('.delete-confirmation');
    if (existingDialog) {
      existingDialog.remove();
    }
    
    const dialog = document.createElement('div');
    dialog.className = 'delete-confirmation';
    dialog.innerHTML = `
      <h4>–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç?</h4>
      <p>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${element.displayName || '—ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç'}?</p>
      <div class="button-group">
        <button class="btn-cancel">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn-confirm">–£–¥–∞–ª–∏—Ç—å</button>
      </div>
    `;
    
    document.body.appendChild(dialog);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dialog.querySelector('.btn-cancel').addEventListener('click', () => {
      dialog.remove();
    });
    
    dialog.querySelector('.btn-confirm').addEventListener('click', () => {
      this.confirmElementDelete(element);
      dialog.remove();
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (dialog.parentNode) {
        dialog.remove();
      }
    }, 10000);
  }

  confirmElementDelete(element) {
    if (this.app && this.app.deleteElement) {
      this.app.deleteElement(element);
      if (window.mobileUI) {
        window.mobileUI.showNotification(`${element.displayName || '–≠–ª–µ–º–µ–Ω—Ç'} —É–¥–∞–ª–µ–Ω`);
      }
    } else {
      console.error('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
      if (window.mobileUI) {
        window.mobileUI.showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç');
      }
    }
  }

  // =========================== 
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  // ===========================

  forwardTapToApp(x, y) {
    // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–∞–ø–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if (this.app && this.app.handleCanvasClick) {
      // –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
      const fakeEvent = {
        clientX: x,
        clientY: y,
        preventDefault: () => {},
        stopPropagation: () => {}
      };
      this.app.handleCanvasClick(fakeEvent);
    } else if (typeof onCanvasClick === 'function') {
      // –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
      const fakeEvent = {
        clientX: x,
        clientY: y,
        preventDefault: () => {},
        stopPropagation: () => {}
      };
      onCanvasClick(fakeEvent);
    } else {
      console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  highlightElement(element) {
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    if (this.app && this.app.highlightElement) {
      this.app.highlightElement(element);
    }
  }

  convertCanvasToAppCoords(canvasX, canvasY) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç canvas –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if (!this.app || !this.app.renderer2d || !this.app.renderer2d.transform) {
      return { x: canvasX, y: canvasY };
    }
    
    const transform = this.app.renderer2d.transform;
    const x = (canvasX - transform.offsetX) / transform.scale;
    const y = (canvasY - transform.offsetY) / transform.scale;
    
    return { x, y };
  }

  calculateDistance(x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
  }

  // =========================== 
  // –í–ò–ó–£–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨
  // ===========================

  showTouchIndicator(x, y) {
    if (!this.touchIndicator) return;
    
    this.touchIndicator.style.left = x + 'px';
    this.touchIndicator.style.top = y + 'px';
    this.touchIndicator.classList.add('active');
  }

  updateTouchIndicator(x, y) {
    if (!this.touchIndicator) return;
    
    this.touchIndicator.style.left = x + 'px';
    this.touchIndicator.style.top = y + 'px';
  }

  hideTouchIndicator() {
    if (!this.touchIndicator) return;
    
    this.touchIndicator.classList.remove('active');
  }

  // =========================== 
  // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –ú–û–ë–ò–õ–¨–ù–´–ú UI
  // ===========================

  setEditMode(enabled) {
    this.editMode = enabled;
    if (window.mobileUI) {
      window.mobileUI.editMode = enabled;
    }
  }

  setDeleteMode(enabled) {
    this.deleteMode = enabled;
    if (window.mobileUI) {
      window.mobileUI.deleteMode = enabled;
    }
  }

  deactivateAllModes() {
    this.editMode = false;
    this.deleteMode = false;
    this.selectedElement = null;
    
    if (window.mobileUI) {
      window.mobileUI.deactivateAllModes();
    }
  }

  resetTouchState() {
    this.touches.clear();
    this.deactivateAllModes();
    this.dragOffset = { x: 0, y: 0 };
    this.initialPinchDistance = null;
    this.lastPinchDistance = null;
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    if (this.app && this.app.clearHighlight) {
      this.app.clearHighlight();
    }
  }

  // =========================== 
  // –û–ß–ò–°–¢–ö–ê
  // ===========================

  destroy() {
    if (this.canvas) {
      this.canvas.removeEventListener('touchstart', this.handleTouchStart);
      this.canvas.removeEventListener('touchmove', this.handleTouchMove);
      this.canvas.removeEventListener('touchend', this.handleTouchEnd);
      this.canvas.removeEventListener('touchcancel', this.handleTouchCancel);
    }
    
    if (this.touchIndicator && this.touchIndicator.parentNode) {
      this.touchIndicator.parentNode.removeChild(this.touchIndicator);
    }
    
    this.resetTouchState();
    this.isInitialized = false;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
  module.exports = TouchHandler;
} else {
  window.TouchHandler = TouchHandler;
}
