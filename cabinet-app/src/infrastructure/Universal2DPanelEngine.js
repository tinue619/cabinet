/**
 * üé® –ï–î–ò–ù–´–ô 2D –î–í–ò–ñ–û–ö –†–ï–ù–î–ï–†–ò–ù–ì–ê –ü–ê–ù–ï–õ–ï–ô
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –û–î–ò–ù –¥–≤–∏–∂–æ–∫ –≤–º–µ—Å—Ç–æ 4+ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤
 * –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨: –¢–û–õ–¨–ö–û –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–µ–π - –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ
 */

"use strict";

/**
 * üé® –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô 2D –†–ï–ù–î–ï–†–ï–† –ü–ê–ù–ï–õ–ï–ô
 * –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ª–æ–≥–∏–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–∞–Ω–µ–ª–µ–π –≤–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ
 */
export class Universal2DPanelEngine {
    
    constructor() {
        // üîí –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ - –ï–î–ò–ù–´–ï –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
        this.CONSTANTS = Object.freeze({
            PANEL_THICKNESS_MM: 16,           // —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –ø–∞–Ω–µ–ª–∏ –≤ –º–º
            MIN_THICKNESS_PX: 1,              // –º–∏–Ω–∏–º—É–º –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
            MAX_THICKNESS_PX: 8,              // –º–∞–∫—Å–∏–º—É–º –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
            MIN_STROKE_WIDTH: 0.5,            // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
            DEFAULT_STROKE_WIDTH: 1,          // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
        });
        
        // üé® –¶–≤–µ—Ç–∞ –ø–∞–Ω–µ–ª–µ–π - –ï–î–ò–ù–´–ï –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
        this.COLORS = Object.freeze({
            LDSP: '#e8e3d9',                  // —Ü–≤–µ—Ç –õ–î–°–ü
            LDSP_STROKE: '#b8b0a0',           // –æ–±–≤–æ–¥–∫–∞ –õ–î–°–ü
            HDF: '#f5f1e8',                   // —Ü–≤–µ—Ç –•–î–§
            HDF_STROKE: '#d4c5a0',            // –æ–±–≤–æ–¥–∫–∞ –•–î–§
            MDF: '#f0e6d2',                   // —Ü–≤–µ—Ç –ú–î–§
            MDF_STROKE: '#c8b896',            // –æ–±–≤–æ–¥–∫–∞ –ú–î–§
            INTERIOR: '#fafafa',              // —Ñ–æ–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞
            OUTLINE: '#2c3e50'                // –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä
        });
        
        Object.freeze(this);
    }
    
    // ===============================================
    // üéØ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –†–ï–ù–î–ï–†–ò–ù–ì–ê
    // ===============================================
    
    /**
     * üîß –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ü–†–ê–í–ò–õ–¨–ù–û–ô —Ç–æ–ª—â–∏–Ω—ã —Ç–æ—Ä—Ü–∞ –ø–∞–Ω–µ–ª–∏
     * –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –º–µ—Å—Ç–æ –≤–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ –≥–¥–µ —ç—Ç–æ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è
     */
    calculatePanelThickness(scale) {
        const realThickness = this.CONSTANTS.PANEL_THICKNESS_MM * scale;
        
        // üéØ –ö–õ–Æ–ß–ï–í–ê–Ø –§–û–†–ú–£–õ–ê - –ò–°–ü–†–ê–í–õ–Ø–ï–¢ –ü–†–û–ë–õ–ï–ú–£ –¢–û–õ–°–¢–´–• –¢–û–†–¶–û–í:
        return Math.max(
            this.CONSTANTS.MIN_THICKNESS_PX,
            Math.min(realThickness, this.CONSTANTS.MAX_THICKNESS_PX)
        );
    }
    
    /**
     * üñäÔ∏è –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã –æ–±–≤–æ–¥–∫–∏
     */
    calculateStrokeWidth(baseWidth, scale) {
        return Math.max(this.CONSTANTS.MIN_STROKE_WIDTH, baseWidth / scale);
    }
    
    /**
     * üèóÔ∏è –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ (–≤–∏–¥ —Å–ø–µ—Ä–µ–¥–∏)
     * –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–∞–Ω–µ–ª–µ–π
     */
    renderPanel(ctx, panel, scale, offset = {x: 0, y: 0}) {
        const { x, y, width, height } = panel;
        const offsetX = offset.x || 0;
        const offsetY = offset.y || 0;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ü–†–ê–í–ò–õ–¨–ù–£–Æ —Ç–æ–ª—â–∏–Ω—É
        const thickness = this.calculatePanelThickness(scale);
        const strokeWidth = this.calculateStrokeWidth(this.CONSTANTS.DEFAULT_STROKE_WIDTH, scale);
        
        ctx.save();
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ –ø–∞–Ω–µ–ª–∏
        ctx.fillStyle = this.COLORS.LDSP;
        ctx.fillRect(offsetX + x, offsetY + y, width, height);
        
        // –û–±–≤–æ–¥–∫–∞ –ø–∞–Ω–µ–ª–∏
        ctx.strokeStyle = this.COLORS.LDSP_STROKE;
        ctx.lineWidth = strokeWidth;
        ctx.strokeRect(offsetX + x, offsetY + y, width, height);
        
        ctx.restore();
    }
    
    /**
     * üè† –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–∫–∞—Ñ–∞ - –†–ï–ê–õ–¨–ù–´–ï –ü–†–û–ü–û–†–¶–ò–ò –∫–∞–∫ –≤ –∂–∏–∑–Ω–∏
     * –¢–æ—Ä—Ü—ã –ø–∞–Ω–µ–ª–µ–π –†–ï–ê–õ–¨–ù–û 16–º–º –≤ –º–∞—Å—à—Ç–∞–±–µ, –Ω–æ –≤—ã–≥–ª—è–¥—è—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
     */
    renderCabinet(ctx, dimensions, scale, offset = {x: 0, y: 0}) {
        const { width, height, depth, baseHeight = 100 } = dimensions;
        const offsetX = offset.x || 0;
        const offsetY = offset.y || 0;
        
        const scaledWidth = width * scale;
        const scaledHeight = height * scale;
        const scaledBaseHeight = baseHeight * scale;
        
        // –†–ï–ê–õ–¨–ù–ê–Ø —Ç–æ–ª—â–∏–Ω–∞ –ø–∞–Ω–µ–ª–∏ 16–º–º –≤ –º–∞—Å—à—Ç–∞–±–µ
        const panelThickness = 16 * scale;
        
        ctx.save();
        
        // 1. –§–æ–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ (—Å–≤–µ—Ç–ª—ã–π)
        ctx.fillStyle = this.COLORS.INTERIOR;
        ctx.fillRect(offsetX, offsetY, scaledWidth, scaledHeight);
        
        // 2. –†–ï–ê–õ–¨–ù–´–ï —Ç–æ—Ä—Ü—ã –ø–∞–Ω–µ–ª–µ–π 16–º–º (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        ctx.fillStyle = this.COLORS.LDSP;
        ctx.strokeStyle = this.COLORS.LDSP_STROKE;
        ctx.lineWidth = 1;
        
        // –õ–µ–≤–∞—è –±–æ–∫–æ–≤–∏–Ω–∞ (–†–ï–ê–õ–¨–ù–û 16–º–º)
        ctx.fillRect(offsetX, offsetY, panelThickness, scaledHeight);
        ctx.strokeRect(offsetX, offsetY, panelThickness, scaledHeight);
        
        // –ü—Ä–∞–≤–∞—è –±–æ–∫–æ–≤–∏–Ω–∞ (–†–ï–ê–õ–¨–ù–û 16–º–º)
        ctx.fillRect(offsetX + scaledWidth - panelThickness, offsetY, panelThickness, scaledHeight);
        ctx.strokeRect(offsetX + scaledWidth - panelThickness, offsetY, panelThickness, scaledHeight);
        
        // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (–†–ï–ê–õ–¨–ù–û 16–º–º)
        ctx.fillRect(offsetX + panelThickness, offsetY, scaledWidth - 2 * panelThickness, panelThickness);
        ctx.strokeRect(offsetX + panelThickness, offsetY, scaledWidth - 2 * panelThickness, panelThickness);
        
        // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (–¥–Ω–æ) - –ù–ê —Ü–æ–∫–æ–ª—è—Ö, –∞ –Ω–µ –ø–æ–¥ –Ω–∏–º–∏!
        const bottomY = offsetY + scaledHeight - scaledBaseHeight;
        ctx.fillRect(offsetX + panelThickness, bottomY, scaledWidth - 2 * panelThickness, panelThickness);
        ctx.strokeRect(offsetX + panelThickness, bottomY, scaledWidth - 2 * panelThickness, panelThickness);
        
        // 3. –¶–æ–∫–æ–ª—å (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–æ–Ω–∞) - –≤ —Å–∞–º–æ–º –Ω–∏–∑—É
        const baseLineY = offsetY + scaledHeight - scaledBaseHeight;
        ctx.fillStyle = '#e8e3d9';
        ctx.fillRect(offsetX + panelThickness, baseLineY + panelThickness, scaledWidth - 2 * panelThickness, scaledBaseHeight - panelThickness);
        
        // –ö–æ–Ω—Ç—É—Ä —Ü–æ–∫–æ–ª—è
        ctx.strokeStyle = '#b8b0a0';
        ctx.strokeRect(offsetX + panelThickness, baseLineY + panelThickness, scaledWidth - 2 * panelThickness, scaledBaseHeight - panelThickness);
        
        // 4. –ë–ï–ó –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞ - —Ç–æ–ª—å–∫–æ —Ç–æ—Ä—Ü—ã –ø–∞–Ω–µ–ª–µ–π
        // ctx.strokeStyle = '#333333';
        // ctx.lineWidth = 2;
        // ctx.strokeRect(offsetX, offsetY, scaledWidth, scaledHeight);
        
        ctx.restore();
    }
    
    /**
     * üìè –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
     */
    calculateFitScale(containerSize, cabinetSize, padding = 60) {
        const availableWidth = containerSize.width - padding * 2;
        const availableHeight = containerSize.height - padding * 2;
        
        const scaleX = availableWidth / cabinetSize.width;
        const scaleY = availableHeight / cabinetSize.height;
        
        return Math.min(scaleX, scaleY, 1.5); // –º–∞–∫—Å–∏–º—É–º 150%
    }
    
    /**
     * üìê –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
     */
    calculateCenterOffset(containerSize, cabinetSize, scale) {
        const scaledWidth = cabinetSize.width * scale;
        const scaledHeight = cabinetSize.height * scale;
        
        return {
            x: (containerSize.width - scaledWidth) / 2,
            y: (containerSize.height - scaledHeight) / 2
        };
    }
    
    /**
     * üé® –ü–æ–ª–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —à–∫–∞—Ñ–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     * –ó–ê–ú–ï–ù–Ø–ï–¢ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã render()
     */
    renderFullCabinet(canvas, cabinetData) {
        const ctx = canvas.getContext('2d');
        const containerSize = {
            width: canvas.clientWidth,
            height: canvas.clientHeight
        };
        
        // –û—á–∏—â–∞–µ–º canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –∏ –ø–æ–∑–∏—Ü–∏—é
        const scale = this.calculateFitScale(containerSize, cabinetData.dimensions);
        const offset = this.calculateCenterOffset(containerSize, cabinetData.dimensions, scale);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —à–∫–∞—Ñ
        this.renderCabinet(ctx, cabinetData.dimensions, scale, offset);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä—ã
        this.renderDimensions(ctx, cabinetData.dimensions, scale, offset);
    }
    
    /**
     * üìè –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
     */
    renderDimensions(ctx, dimensions, scale, offset) {
        ctx.save();
        
        ctx.fillStyle = '#666';
        ctx.font = `${Math.max(10, 12 / scale)}px Arial`;
        ctx.textAlign = 'center';
        
        // –®–∏—Ä–∏–Ω–∞ (—Å–≤–µ—Ä—Ö—É)
        const topY = offset.y - 15;
        const centerX = offset.x + (dimensions.width * scale) / 2;
        ctx.fillText(`${dimensions.width}–º–º`, centerX, topY);
        
        // –í—ã—Å–æ—Ç–∞ (—Å–ª–µ–≤–∞)
        const leftX = offset.x - 15;
        const centerY = offset.y + (dimensions.height * scale) / 2;
        ctx.save();
        ctx.translate(leftX, centerY);
        ctx.rotate(-Math.PI / 2);
        ctx.fillText(`${dimensions.height}–º–º`, 0, 0);
        ctx.restore();
        
        ctx.restore();
    }
}

// ===============================================
// üè≠ –°–ò–ù–ì–õ–¢–û–ù –≠–ö–°–ü–û–†–¢
// ===============================================

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const panelEngine = new Universal2DPanelEngine();

export { panelEngine as PanelEngine };
export default panelEngine;

console.log('üé® Universal2DPanelEngine loaded - –ï–î–ò–ù–´–ô –¥–≤–∏–∂–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–∞–Ω–µ–ª–µ–π');
