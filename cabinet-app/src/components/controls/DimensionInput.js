/**
 * MICRO-COMPONENT: Dimension Input
 * Single Responsibility: –¢–û–õ–¨–ö–û –≤–≤–æ–¥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
 * Domain Layer: UI Component - Dimension Management
 */

"use strict";

/**
 * üìê –ö–û–ù–¢–†–û–õ–õ–ï–† –í–í–û–î–ê –†–ê–ó–ú–ï–†–û–í
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–≤–æ–¥–∞ –≥–∞–±–∞—Ä–∏—Ç–æ–≤ —à–∫–∞—Ñ–∞
 * –°–æ–±–ª—é–¥–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü –∏ Single Responsibility
 */
export class DimensionInput {
    
    constructor(containerElement, initialDimensions = {}) {
        if (!containerElement) {
            throw new Error('DimensionInput requires container element');
        }
        
        // üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–ª–Ω–∞—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è
        let _container = containerElement;
        let _dimensions = Object.freeze({
            width: initialDimensions.width || 800,
            height: initialDimensions.height || 2000,
            depth: initialDimensions.depth || 600,
            baseHeight: initialDimensions.baseHeight || 100
        });
        
        let _constraints = Object.freeze({
            width: { min: 400, max: 2000, step: 10 },
            height: { min: 600, max: 3000, step: 10 },
            depth: { min: 300, max: 800, step: 10 },
            baseHeight: { min: 60, max: 200, step: 5 }
        });
        
        let _callbacks = new Map();
        let _inputs = new Map();
        let _isValid = true;
        
        // ===============================================
        // üîç –ü–£–ë–õ–ò–ß–ù–´–ï –ì–ï–¢–¢–ï–†–´ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
        // ===============================================
        
        Object.defineProperty(this, 'dimensions', {
            get: () => Object.freeze({..._dimensions}),
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'isValid', {
            get: () => _isValid,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'constraints', {
            get: () => Object.freeze({..._constraints}),
            enumerable: true,
            configurable: false
        });
        
        // ===============================================
        // üéØ –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´
        // ===============================================
        
        /**
         * üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
         */
        this.initialize = () => {
            this._createInputs();
            this._bindEvents();
            this._validateAll();
            
            console.log('üìê DimensionInput initialized with SRP compliance');
        };
        
        /**
         * üìê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
         * @param {Object} newDimensions - –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
         * @returns {boolean} —É—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
         */
        this.setDimensions = (newDimensions) => {
            if (!newDimensions || typeof newDimensions !== 'object') {
                throw new Error('Invalid dimensions object');
            }
            
            const validatedDimensions = this._validateDimensions(newDimensions);
            
            if (validatedDimensions) {
                const oldDimensions = _dimensions;
                _dimensions = Object.freeze(validatedDimensions);
                
                this._updateInputValues();
                this._emit('dimensions-changed', {
                    oldDimensions,
                    newDimensions: _dimensions
                });
                
                return true;
            }
            
            return false;
        };
        
        /**
         * üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
         * @param {string} eventName - –∏–º—è —Å–æ–±—ã—Ç–∏—è
         * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
         */
        this.on = (eventName, callback) => {
            if (typeof callback !== 'function') {
                throw new Error('Callback must be a function');
            }
            
            if (!_callbacks.has(eventName)) {
                _callbacks.set(eventName, []);
            }
            
            _callbacks.get(eventName).push(callback);
        };
        
        /**
         * üì¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
         */
        this.off = (eventName, callback) => {
            if (_callbacks.has(eventName)) {
                const callbacks = _callbacks.get(eventName);
                const index = callbacks.indexOf(callback);
                if (index > -1) {
                    callbacks.splice(index, 1);
                }
            }
        };
        
        /**
         * üßπ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
         */
        this.destroy = () => {
            _callbacks.clear();
            _inputs.clear();
            if (_container) {
                _container.innerHTML = '';
                _container = null;
            }
        };
        
        // ===============================================
        // üîí –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´
        // ===============================================
        
        /**
         * üîí –°–æ–∑–¥–∞–Ω–∏–µ input —ç–ª–µ–º–µ–Ω—Ç–æ–≤
         * @private
         */
        this._createInputs = () => {
            const inputsHTML = `
                <div class="dimension-input-group">
                    <h3>–ì–∞–±–∞—Ä–∏—Ç—ã —à–∫–∞—Ñ–∞</h3>
                    
                    <div class="input-row">
                        <label for="dim-width">–®–∏—Ä–∏–Ω–∞ (–º–º)</label>
                        <input type="number" id="dim-width" 
                               min="${_constraints.width.min}" 
                               max="${_constraints.width.max}" 
                               step="${_constraints.width.step}"
                               value="${_dimensions.width}">
                        <span class="validation-message" id="width-error"></span>
                    </div>
                    
                    <div class="input-row">
                        <label for="dim-height">–í—ã—Å–æ—Ç–∞ (–º–º)</label>
                        <input type="number" id="dim-height" 
                               min="${_constraints.height.min}" 
                               max="${_constraints.height.max}" 
                               step="${_constraints.height.step}"
                               value="${_dimensions.height}">
                        <span class="validation-message" id="height-error"></span>
                    </div>
                    
                    <div class="input-row">
                        <label for="dim-depth">–ì–ª—É–±–∏–Ω–∞ (–º–º)</label>
                        <input type="number" id="dim-depth" 
                               min="${_constraints.depth.min}" 
                               max="${_constraints.depth.max}" 
                               step="${_constraints.depth.step}"
                               value="${_dimensions.depth}">
                        <span class="validation-message" id="depth-error"></span>
                    </div>
                    
                    <div class="input-row">
                        <label for="dim-base">–¶–æ–∫–æ–ª—å (–º–º)</label>
                        <input type="number" id="dim-base" 
                               min="${_constraints.baseHeight.min}" 
                               max="${_constraints.baseHeight.max}" 
                               step="${_constraints.baseHeight.step}"
                               value="${_dimensions.baseHeight}">
                        <span class="validation-message" id="baseHeight-error"></span>
                    </div>
                    
                    <button type="button" id="apply-dimensions" class="apply-btn" disabled>
                        –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    </button>
                </div>
            `;
            
            _container.innerHTML = inputsHTML;
            
            // –ö—ç—à–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
            _inputs.set('width', document.getElementById('dim-width'));
            _inputs.set('height', document.getElementById('dim-height'));
            _inputs.set('depth', document.getElementById('dim-depth'));
            _inputs.set('baseHeight', document.getElementById('dim-base'));
            _inputs.set('applyBtn', document.getElementById('apply-dimensions'));
        };
        
        /**
         * üîí –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
         * @private
         */
        this._bindEvents = () => {
            // –°–æ–±—ã—Ç–∏—è input –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            ['width', 'height', 'depth', 'baseHeight'].forEach(dimension => {
                const input = _inputs.get(dimension);
                if (input) {
                    input.addEventListener('input', () => {
                        this._validateSingle(dimension);
                        this._updateApplyButton();
                    });
                }
            });
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            const applyBtn = _inputs.get('applyBtn');
            if (applyBtn) {
                applyBtn.addEventListener('click', () => {
                    this._applyChanges();
                });
            }
        };
        
        /**
         * üîí –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è
         * @private
         */
        this._validateSingle = (dimension) => {
            const input = _inputs.get(dimension);
            const errorElement = document.getElementById(`${dimension}-error`);
            
            if (!input || !errorElement) return false;
            
            const value = parseInt(input.value);
            const constraint = _constraints[dimension];
            
            let isValid = true;
            let errorMessage = '';
            
            if (isNaN(value)) {
                isValid = false;
                errorMessage = '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ';
            } else if (value < constraint.min) {
                isValid = false;
                errorMessage = `–ú–∏–Ω–∏–º—É–º ${constraint.min}–º–º`;
            } else if (value > constraint.max) {
                isValid = false;
                errorMessage = `–ú–∞–∫—Å–∏–º—É–º ${constraint.max}–º–º`;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            input.classList.toggle('invalid', !isValid);
            errorElement.textContent = errorMessage;
            errorElement.style.display = errorMessage ? 'block' : 'none';
            
            return isValid;
        };
        
        /**
         * üîí –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
         * @private
         */
        this._validateAll = () => {
            const validations = ['width', 'height', 'depth', 'baseHeight']
                .map(dim => this._validateSingle(dim));
            
            _isValid = validations.every(v => v);
            this._updateApplyButton();
            
            return _isValid;
        };
        
        /**
         * üîí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
         * @private
         */
        this._updateApplyButton = () => {
            const applyBtn = _inputs.get('applyBtn');
            if (applyBtn) {
                applyBtn.disabled = !_isValid;
                applyBtn.textContent = _isValid ? '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏';
            }
        };
        
        /**
         * üîí –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
         * @private
         */
        this._applyChanges = () => {
            if (!_isValid) return;
            
            const newDimensions = {
                width: parseInt(_inputs.get('width').value),
                height: parseInt(_inputs.get('height').value),
                depth: parseInt(_inputs.get('depth').value),
                baseHeight: parseInt(_inputs.get('baseHeight').value)
            };
            
            this.setDimensions(newDimensions);
        };
        
        /**
         * üîí –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
         * @private
         */
        this._validateDimensions = (dims) => {
            const validated = {};
            
            for (const [key, constraint] of Object.entries(_constraints)) {
                const value = dims[key];
                
                if (typeof value !== 'number' || isNaN(value)) {
                    console.error(`Invalid ${key}: must be a number`);
                    return null;
                }
                
                if (value < constraint.min || value > constraint.max) {
                    console.error(`Invalid ${key}: must be between ${constraint.min} and ${constraint.max}`);
                    return null;
                }
                
                validated[key] = value;
            }
            
            return validated;
        };
        
        /**
         * üîí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ inputs
         * @private
         */
        this._updateInputValues = () => {
            for (const [dimension, value] of Object.entries(_dimensions)) {
                const input = _inputs.get(dimension);
                if (input) {
                    input.value = value;
                }
            }
        };
        
        /**
         * üîí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
         * @private
         */
        this._emit = (eventName, data) => {
            if (_callbacks.has(eventName)) {
                _callbacks.get(eventName).forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error(`DimensionInput event handler error:`, error);
                    }
                });
            }
        };
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤
        Object.preventExtensions(this);
    }
    
    // ===============================================
    // üè≠ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´
    // ===============================================
    
    /**
     * üè≠ –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
     */
    static createForContainer(containerId, initialDimensions) {
        const container = document.getElementById(containerId);
        if (!container) {
            throw new Error(`Container element with ID '${containerId}' not found`);
        }
        
        const component = new DimensionInput(container, initialDimensions);
        component.initialize();
        return component;
    }
    
    /**
     * üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
     */
    static getInfo() {
        return Object.freeze({
            name: 'DimensionInput',
            version: '1.0.0',
            responsibility: 'Dimension input and validation only',
            compliance: 'SRP + OOP + Encapsulation',
            dependencies: 'None (standalone)'
        });
    }
}

// –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∫–ª–∞—Å—Å–∞
Object.freeze(DimensionInput);
Object.freeze(DimensionInput.prototype);

console.log('üìê DimensionInput micro-component loaded - SRP compliant');
