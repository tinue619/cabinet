/**
 * MICRO-COMPONENT: Zoom Control
 * Single Responsibility: –¢–û–õ–¨–ö–û —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–æ–º
 * Domain Layer: UI Component - Zoom Management
 */

"use strict";

/**
 * üîç –ö–û–ù–¢–†–û–õ–õ–ï–† –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è zoom
 * –°–æ–±–ª—é–¥–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü –∏ Single Responsibility
 */
export class ZoomControl {
    
    constructor(canvasElement) {
        if (!canvasElement) {
            throw new Error('ZoomControl requires canvas element');
        }
        
        // üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–ª–Ω–∞—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è
        let _currentZoom = 1.0;
        let _minZoom = 0.1;
        let _maxZoom = 5.0;
        let _zoomStep = 1.2;
        let _canvas = canvasElement;
        let _callbacks = new Map();
        
        // ===============================================
        // üîç –ü–£–ë–õ–ò–ß–ù–´–ï –ì–ï–¢–¢–ï–†–´ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
        // ===============================================
        
        Object.defineProperty(this, 'currentZoom', {
            get: () => _currentZoom,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'minZoom', {
            get: () => _minZoom,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'maxZoom', {
            get: () => _maxZoom,
            enumerable: true,
            configurable: false
        });
        
        // ===============================================
        // üéØ –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´
        // ===============================================
        
        /**
         * üîç –£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±
         * @returns {number} –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∞
         */
        this.zoomIn = () => {
            const newZoom = Math.min(_currentZoom * _zoomStep, _maxZoom);
            return this._setZoom(newZoom);
        };
        
        /**
         * üîç –£–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—à—Ç–∞–±
         * @returns {number} –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∞
         */
        this.zoomOut = () => {
            const newZoom = Math.max(_currentZoom / _zoomStep, _minZoom);
            return this._setZoom(newZoom);
        };
        
        /**
         * üîç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Å—à—Ç–∞–±
         * @param {number} zoom - –∂–µ–ª–∞–µ–º—ã–π –º–∞—Å—à—Ç–∞–±
         * @returns {number} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–±
         */
        this.setZoom = (zoom) => {
            if (typeof zoom !== 'number' || zoom <= 0) {
                throw new Error('Zoom must be a positive number');
            }
            
            const clampedZoom = Math.max(_minZoom, Math.min(zoom, _maxZoom));
            return this._setZoom(clampedZoom);
        };
        
        /**
         * üîç –ú–∞—Å—à—Ç–∞–± "–ø–æ —Ä–∞–∑–º–µ—Ä—É" (fit to view)
         * @param {Object} contentBounds - –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {width, height}
         * @returns {number} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–±
         */
        this.fitToView = (contentBounds) => {
            if (!contentBounds || !contentBounds.width || !contentBounds.height) {
                console.warn('ZoomControl.fitToView: invalid contentBounds');
                return _currentZoom;
            }
            
            const canvasRect = _canvas.getBoundingClientRect();
            const padding = 50; // –æ—Ç—Å—Ç—É–ø—ã
            
            const scaleX = (canvasRect.width - padding) / contentBounds.width;
            const scaleY = (canvasRect.height - padding) / contentBounds.height;
            
            const fitZoom = Math.min(scaleX, scaleY);
            return this.setZoom(fitZoom);
        };
        
        /**
         * üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
         * @param {string} eventName - –∏–º—è —Å–æ–±—ã—Ç–∏—è ('zoom-changed')
         * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
         */
        this.on = (eventName, callback) => {
            if (typeof callback !== 'function') {
                throw new Error('Callback must be a function');
            }
            
            if (!_callbacks.has(eventName)) {
                _callbacks.set(eventName, []);
            }
            
            _callbacks.get(eventName).push(callback);
        };
        
        /**
         * üì¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
         * @param {string} eventName
         * @param {Function} callback
         */
        this.off = (eventName, callback) => {
            if (_callbacks.has(eventName)) {
                const callbacks = _callbacks.get(eventName);
                const index = callbacks.indexOf(callback);
                if (index > -1) {
                    callbacks.splice(index, 1);
                }
            }
        };
        
        /**
         * üßπ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
         */
        this.destroy = () => {
            _callbacks.clear();
            _canvas = null;
        };
        
        // ===============================================
        // üîí –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´
        // ===============================================
        
        /**
         * üîí –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—à—Ç–∞–±–∞
         * @private
         */
        this._setZoom = (newZoom) => {
            const oldZoom = _currentZoom;
            _currentZoom = newZoom;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            this._emit('zoom-changed', {
                oldZoom,
                newZoom: _currentZoom,
                zoomFactor: _currentZoom / oldZoom
            });
            
            return _currentZoom;
        };
        
        /**
         * üîí –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
         * @private
         */
        this._emit = (eventName, data) => {
            if (_callbacks.has(eventName)) {
                _callbacks.get(eventName).forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error(`ZoomControl event handler error:`, error);
                    }
                });
            }
        };
        
        // ===============================================
        // üîí –§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê
        // ===============================================
        
        // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        Object.freeze(this.zoomIn);
        Object.freeze(this.zoomOut);
        Object.freeze(this.setZoom);
        Object.freeze(this.fitToView);
        Object.freeze(this.on);
        Object.freeze(this.off);
        Object.freeze(this.destroy);
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤
        Object.preventExtensions(this);
        
        console.log('üîç ZoomControl initialized with SRP compliance');
    }
    
    // ===============================================
    // üè≠ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´
    // ===============================================
    
    /**
     * üè≠ –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ZoomControl —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ DOM
     * @param {string} canvasId - ID canvas —ç–ª–µ–º–µ–Ω—Ç–∞
     * @returns {ZoomControl}
     */
    static createForCanvas(canvasId) {
        const canvas = document.getElementById(canvasId);
        if (!canvas) {
            throw new Error(`Canvas element with ID '${canvasId}' not found`);
        }
        
        return new ZoomControl(canvas);
    }
    
    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ
     * @returns {Object}
     */
    static getInfo() {
        return Object.freeze({
            name: 'ZoomControl',
            version: '1.0.0',
            responsibility: 'Zoom management only',
            compliance: 'SRP + OOP + Encapsulation',
            dependencies: 'None (standalone)'
        });
    }
}

// –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∫–ª–∞—Å—Å–∞
Object.freeze(ZoomControl);
Object.freeze(ZoomControl.prototype);

console.log('üîç ZoomControl micro-component loaded - SRP compliant');
