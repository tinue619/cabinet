/**
 * MICRO-COMPONENT: Material Selector
 * Single Responsibility: –¢–û–õ–¨–ö–û –≤—ã–±–æ—Ä –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 * Domain Layer: UI Component - Material Management
 */

"use strict";

/**
 * üß± –°–ï–õ–ï–ö–¢–û–† –ú–ê–¢–ï–†–ò–ê–õ–û–í
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 * –°–æ–±–ª—é–¥–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü –∏ Single Responsibility
 */
export class MaterialSelector {
    
    constructor(containerElement, availableMaterials = {}) {
        if (!containerElement) {
            throw new Error('MaterialSelector requires container element');
        }
        
        // üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–ª–Ω–∞—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è
        let _container = containerElement;
        let _materials = new Map();
        let _selectedMaterial = null;
        let _callbacks = new Map();
        let _isInitialized = false;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        for (const [key, material] of Object.entries(availableMaterials)) {
            _materials.set(key, material);
        }
        
        // ===============================================
        // üîç –ü–£–ë–õ–ò–ß–ù–´–ï –ì–ï–¢–¢–ï–†–´ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
        // ===============================================
        
        Object.defineProperty(this, 'selectedMaterial', {
            get: () => _selectedMaterial,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'materialsCount', {
            get: () => _materials.size,
            enumerable: true,
            configurable: false
        });
        
        Object.defineProperty(this, 'isInitialized', {
            get: () => _isInitialized,
            enumerable: true,
            configurable: false
        });
        
        // ===============================================
        // üéØ –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´
        // ===============================================
        
        /**
         * üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
         */
        this.initialize = () => {
            this._createMaterialsUI();
            this._bindEvents();
            _isInitialized = true;
            
            console.log(`üß± MaterialSelector initialized with ${_materials.size} materials`);
        };
        
        /**
         * üß± –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
         * @param {string} key - –∫–ª—é—á –º–∞—Ç–µ—Ä–∏–∞–ª–∞
         * @param {Object} material - –æ–±—ä–µ–∫—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞
         */
        this.addMaterial = (key, material) => {
            if (!material || !material.name) {
                throw new Error('Invalid material object');
            }
            
            _materials.set(key, material);
            
            if (_isInitialized) {
                this._updateMaterialsUI();
            }
            
            this._emit('material-added', { key, material });
        };
        
        /**
         * üéØ –í—ã–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
         * @param {string} materialKey - –∫–ª—é—á –º–∞—Ç–µ—Ä–∏–∞–ª–∞
         * @returns {boolean} —É—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
         */
        this.selectMaterial = (materialKey) => {
            if (!_materials.has(materialKey)) {
                console.warn(`Material ${materialKey} not found`);
                return false;
            }
            
            const oldMaterial = _selectedMaterial;
            _selectedMaterial = _materials.get(materialKey);
            
            this._updateSelectedUI();
            this._emit('material-selected', {
                oldMaterial,
                newMaterial: _selectedMaterial,
                materialKey
            });
            
            return true;
        };
        
        /**
         * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
         * @returns {Array} –º–∞—Å—Å–∏–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
         */
        this.getAllMaterials = () => {
            return Array.from(_materials.entries()).map(([key, material]) => ({
                key,
                material
            }));
        };
        
        /**
         * üîç –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–∏–ø—É
         * @param {string} materialType - —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (structural, backing, facade)
         * @returns {Array} –º–∞—Å—Å–∏–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
         */
        this.findByType = (materialType) => {
            const result = [];
            
            for (const [key, material] of _materials.entries()) {
                if (material.materialKind === materialType || material.type === materialType) {
                    result.push({ key, material });
                }
            }
            
            return result;
        };
        
        /**
         * üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
         * @param {string} eventName - –∏–º—è —Å–æ–±—ã—Ç–∏—è
         * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
         */
        this.on = (eventName, callback) => {
            if (typeof callback !== 'function') {
                throw new Error('Callback must be a function');
            }
            
            if (!_callbacks.has(eventName)) {
                _callbacks.set(eventName, []);
            }
            
            _callbacks.get(eventName).push(callback);
        };
        
        /**
         * üì¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
         */
        this.off = (eventName, callback) => {
            if (_callbacks.has(eventName)) {
                const callbacks = _callbacks.get(eventName);
                const index = callbacks.indexOf(callback);
                if (index > -1) {
                    callbacks.splice(index, 1);
                }
            }
        };
        
        /**
         * üßπ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
         */
        this.destroy = () => {
            _callbacks.clear();
            _materials.clear();
            if (_container) {
                _container.innerHTML = '';
                _container = null;
            }
            _selectedMaterial = null;
            _isInitialized = false;
        };
        
        // ===============================================
        // üîí –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´
        // ===============================================
        
        /**
         * üîí –°–æ–∑–¥–∞–Ω–∏–µ UI –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
         * @private
         */
        this._createMaterialsUI = () => {
            const materialsHTML = `
                <div class="material-selector-group">
                    <h3>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</h3>
                    <div class="materials-list" id="materials-list">
                        ${this._generateMaterialsHTML()}
                    </div>
                    <div class="material-info" id="material-info">
                        <div class="no-selection">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª</div>
                    </div>
                </div>
            `;
            
            _container.innerHTML = materialsHTML;
        };
        
        /**
         * üîí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
         * @private
         */
        this._generateMaterialsHTML = () => {
            let html = '';
            
            for (const [key, material] of _materials.entries()) {
                const usage = Array.isArray(material.usage) 
                    ? material.usage.join(', ') 
                    : (material.usage || '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π');
                
                html += `
                    <div class="material-item" data-material-key="${key}">
                        <div class="material-header">
                            <span class="material-name">${material.name}</span>
                            <span class="material-thickness">${material.thickness}–º–º</span>
                        </div>
                        <div class="material-usage">${usage}</div>
                        <div class="material-type">${this._formatMaterialType(material.materialKind || material.type)}</div>
                    </div>
                `;
            }
            
            return html || '<div class="empty-materials">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</div>';
        };
        
        /**
         * üîí –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
         * @private
         */
        this._formatMaterialType = (type) => {
            const typeMap = {
                'structural': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω—ã–π',
                'backing': '–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞',
                'facade': '–§–∞—Å–∞–¥–Ω—ã–π'
            };
            
            return typeMap[type] || type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        };
        
        /**
         * üîí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
         * @private
         */
        this._updateMaterialsUI = () => {
            const materialsList = document.getElementById('materials-list');
            if (materialsList) {
                materialsList.innerHTML = this._generateMaterialsHTML();
                this._bindMaterialEvents();
            }
        };
        
        /**
         * üîí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
         * @private
         */
        this._updateSelectedUI = () => {
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const allItems = _container.querySelectorAll('.material-item');
            allItems.forEach(item => item.classList.remove('selected'));
            
            // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
            if (_selectedMaterial) {
                const selectedKey = this._findMaterialKey(_selectedMaterial);
                if (selectedKey) {
                    const selectedItem = _container.querySelector(`[data-material-key="${selectedKey}"]`);
                    if (selectedItem) {
                        selectedItem.classList.add('selected');
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
                this._updateMaterialInfo();
            }
        };
        
        /**
         * üîí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ
         * @private
         */
        this._updateMaterialInfo = () => {
            const infoContainer = document.getElementById('material-info');
            if (!infoContainer || !_selectedMaterial) return;
            
            const usage = Array.isArray(_selectedMaterial.usage) 
                ? _selectedMaterial.usage.join(', ') 
                : (_selectedMaterial.usage || '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π');
            
            infoContainer.innerHTML = `
                <div class="selected-material-info">
                    <h4>${_selectedMaterial.name}</h4>
                    <div class="material-details">
                        <div class="detail-row">
                            <span class="label">–¢–æ–ª—â–∏–Ω–∞:</span>
                            <span class="value">${_selectedMaterial.thickness}–º–º</span>
                        </div>
                        <div class="detail-row">
                            <span class="label">–¢–∏–ø:</span>
                            <span class="value">${this._formatMaterialType(_selectedMaterial.materialKind || _selectedMaterial.type)}</span>
                        </div>
                        <div class="detail-row">
                            <span class="label">–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</span>
                            <span class="value">${usage}</span>
                        </div>
                    </div>
                </div>
            `;
        };
        
        /**
         * üîí –ü–æ–∏—Å–∫ –∫–ª—é—á–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
         * @private
         */
        this._findMaterialKey = (material) => {
            for (const [key, mat] of _materials.entries()) {
                if (mat === material || mat.name === material.name) {
                    return key;
                }
            }
            return null;
        };
        
        /**
         * üîí –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
         * @private
         */
        this._bindEvents = () => {
            this._bindMaterialEvents();
        };
        
        /**
         * üîí –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
         * @private
         */
        this._bindMaterialEvents = () => {
            const materialItems = _container.querySelectorAll('.material-item');
            
            materialItems.forEach(item => {
                item.addEventListener('click', () => {
                    const materialKey = item.dataset.materialKey;
                    if (materialKey) {
                        this.selectMaterial(materialKey);
                    }
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç—ã
                item.addEventListener('mouseenter', () => {
                    item.classList.add('hovered');
                });
                
                item.addEventListener('mouseleave', () => {
                    item.classList.remove('hovered');
                });
            });
        };
        
        /**
         * üîí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
         * @private
         */
        this._emit = (eventName, data) => {
            if (_callbacks.has(eventName)) {
                _callbacks.get(eventName).forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error(`MaterialSelector event handler error:`, error);
                    }
                });
            }
        };
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤
        Object.preventExtensions(this);
    }
    
    // ===============================================
    // üè≠ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´
    // ===============================================
    
    /**
     * üè≠ –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     * @param {Object} materials - –æ–±—ä–µ–∫—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
     * @returns {MaterialSelector}
     */
    static createForContainer(containerId, materials = {}) {
        const container = document.getElementById(containerId);
        if (!container) {
            throw new Error(`Container element with ID '${containerId}' not found`);
        }
        
        const component = new MaterialSelector(container, materials);
        component.initialize();
        return component;
    }
    
    /**
     * üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
     * @returns {Object}
     */
    static getInfo() {
        return Object.freeze({
            name: 'MaterialSelector',
            version: '1.0.0',
            responsibility: 'Material selection and display only',
            compliance: 'SRP + OOP + Encapsulation',
            dependencies: 'None (standalone)'
        });
    }
}

// –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∫–ª–∞—Å—Å–∞
Object.freeze(MaterialSelector);
Object.freeze(MaterialSelector.prototype);

console.log('üß± MaterialSelector micro-component loaded - SRP compliant');
