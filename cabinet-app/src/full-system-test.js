/**
 * –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –° UI
 * Application Layer - Full System Integration
 */

console.log('üèóÔ∏è Testing full cabinet system...');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
import('../../new_core/index.js')
    .then(coreModule => {
        console.log('‚úÖ Core module loaded:', coreModule);
        
        const { SystemFactory } = coreModule;
        
        // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        console.log('üè≠ Creating system...');
        const system = SystemFactory.create({
            enableEvents: true,
            enableValidation: true,
            debugMode: true
        });
        
        console.log('‚úÖ System created:', system);
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã  
        console.log('üß± Creating materials...');
        const ldsp16 = system.createLDSP16();
        const hdf3 = system.createHDF3();
        const mdf16 = system.createMDF16();
        
        console.log('‚úÖ Materials created:', {
            ldsp16: ldsp16.name,
            hdf3: hdf3.name, 
            mdf16: mdf16.name
        });
        
        // –°–æ–∑–¥–∞–µ–º —à–∫–∞—Ñ
        console.log('üèóÔ∏è Creating cabinet...');
        const cabinet = system.createCabinet({
            width: 800,
            height: 2000,
            depth: 600,
            baseHeight: 100
        });
        
        console.log('‚úÖ Cabinet created:', cabinet);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª–∏
        console.log('‚öôÔ∏è Generating panels...');
        cabinet.generate();
        
        console.log('‚úÖ Cabinet generated');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        const cabinetData = {
            dimensions: cabinet.dimensions,
            panels: cabinet.getPanels(),
            sections: cabinet.getSections(),
            stats: cabinet.getStats()
        };
        
        console.log('üìä Cabinet data:', cabinetData);
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞ Canvas
        drawCabinetOnCanvas(cabinetData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateCabinetInfo(cabinetData);
        
        // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        window.dispatchEvent(new CustomEvent('cabinet-app-ready', {
            detail: { 
                message: 'Full system test successful',
                cabinet: cabinetData
            }
        }));
        
    })
    .catch(error => {
        console.error('‚ùå FULL SYSTEM TEST FAILED:', error);
        
        window.dispatchEvent(new CustomEvent('cabinet-app-error', {
            detail: { 
                message: `Full system test failed: ${error.message}`,
                stack: error.stack
            }
        }));
    });

/**
 * –ü—Ä–æ—Å—Ç–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–∫–∞—Ñ–∞ –Ω–∞ Canvas
 * UI Layer - Basic Rendering
 */
function drawCabinetOnCanvas(cabinetData) {
    console.log('üé® Drawing cabinet on canvas...');
    
    const canvas = document.getElementById('cabinet-canvas');
    if (!canvas) {
        console.error('‚ùå Canvas not found');
        return;
    }
    
    const ctx = canvas.getContext('2d');
    if (!ctx) {
        console.error('‚ùå Canvas context not found');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
    canvas.width = 800;
    canvas.height = 600;
    
    if (!cabinetData.dimensions) {
        console.error('‚ùå No cabinet dimensions');
        return;
    }
    
    const dims = cabinetData.dimensions;
    
    // –ú–∞—Å—à—Ç–∞–± –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const scale = Math.min(700 / dims.width, 500 / dims.height);
    const offsetX = (canvas.width - dims.width * scale) / 2;
    const offsetY = (canvas.height - dims.height * scale) / 2;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    ctx.fillStyle = '#f0f0f0';
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 2;
    
    // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø—É—Å —à–∫–∞—Ñ–∞
    const cabinetWidth = dims.width * scale;
    const cabinetHeight = dims.height * scale;
    
    ctx.fillRect(offsetX, offsetY, cabinetWidth, cabinetHeight);
    ctx.strokeRect(offsetX, offsetY, cabinetWidth, cabinetHeight);
    
    // –†–∏—Å—É–µ–º –ø–∞–Ω–µ–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (cabinetData.panels && cabinetData.panels.length > 0) {
        ctx.fillStyle = '#d4af37';
        
        cabinetData.panels.forEach(panel => {
            if (panel.position && panel.dimensions) {
                const x = offsetX + panel.position.x * scale;
                const y = offsetY + panel.position.y * scale;
                const w = panel.dimensions.width * scale;
                const h = panel.dimensions.height * scale;
                
                ctx.fillRect(x, y, w, h);
                ctx.strokeRect(x, y, w, h);
            }
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
    ctx.fillStyle = '#333';
    ctx.font = '16px Arial';
    ctx.fillText(`–®–∫–∞—Ñ ${dims.width}√ó${dims.height}√ó${dims.depth}–º–º`, offsetX, offsetY - 10);
    
    console.log('‚úÖ Cabinet drawn on canvas');
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–∞—Ñ–µ –≤ UI
 * UI Layer - Info Display
 */
function updateCabinetInfo(cabinetData) {
    console.log('üìã Updating cabinet info...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statVolume = document.getElementById('stat-volume');
    const statPanels = document.getElementById('stat-panels');
    const statSections = document.getElementById('stat-sections');
    
    if (statVolume && cabinetData.stats) {
        const volume = (cabinetData.stats.volume || 0).toFixed(3);
        statVolume.textContent = `${volume} –º¬≥`;
    }
    
    if (statPanels && cabinetData.stats) {
        statPanels.textContent = cabinetData.stats.panelsCount || 0;
    }
    
    if (statSections && cabinetData.stats) {
        statSections.textContent = cabinetData.stats.sectionsCount || 0;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π
    const partsList = document.getElementById('parts-list');
    if (partsList && cabinetData.panels) {
        partsList.innerHTML = '';
        
        cabinetData.panels.forEach(panel => {
            const div = document.createElement('div');
            div.className = 'part-item';
            div.innerHTML = `
                <span class="part-name">${panel.name}</span>
                <span class="part-material">${panel.material}</span>
            `;
            partsList.appendChild(div);
        });
    }
    
    console.log('‚úÖ Cabinet info updated');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export default {
    name: 'Full System Test',
    version: '1.0-full-integration'
};
