/**
 * Cabinet Core Service
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —è–¥—Ä–æ–º
 * –ò–∑–æ–ª–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —è–¥—Ä–∞
 */

import { CORE_PATH } from '../config.js';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —è–¥—Ä–∞
let SystemFactory;

// –ó–∞–≥—Ä—É–∑–∫–∞ —è–¥—Ä–∞
async function loadCore() {
    try {
        console.log('üöÄ Loading core from:', CORE_PATH);
        const module = await import(CORE_PATH);
        console.log('‚úÖ Core loaded successfully:', module);
        SystemFactory = module.SystemFactory;
        return SystemFactory;
    } catch (error) {
        console.error('‚ùå Failed to load core:', error);
        throw new Error(`Failed to load Cabinet Core from "${CORE_PATH}": ${error.message}`);
    }
}

export class CabinetCoreService {
    constructor() {
        this.system = null;
        this.cabinet = null;
        this.materials = {};
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async initialize() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —è–¥—Ä–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            if (!SystemFactory) {
                await loadCore();
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
            this.system = SystemFactory.create({
                enableEvents: true,
                enableValidation: true,
                debugMode: false
            });
            
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            this.materials = {
                ldsp16: this.system.createLDSP16(),
                hdf3: this.system.createHDF3(),
                mdf16: this.system.createMDF16()
            };
            
            console.log('Cabinet Core Service initialized');
            return true;
        } catch (error) {
            console.error('Failed to initialize Cabinet Core Service:', error);
            throw error;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∫–∞—Ñ
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∫–∞—Ñ–∞ –∏–∑ UI
     */
    createCabinet(params) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Ä–≤–∏—Å–∞
        this.validateCabinetParams(params);
        
        // –°–æ–∑–¥–∞–µ–º —à–∫–∞—Ñ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
        this.cabinet = this.system.createCabinet({
            width: params.width,
            height: params.height,
            depth: params.depth,
            baseHeight: params.baseHeight || 100
        });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª–∏
        this.cabinet.generate();
        
        return this.getCabinetData();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∫–∞—Ñ–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è UI
     */
    getCabinetData() {
        if (!this.cabinet) return null;
        
        return {
            id: this.cabinet.id,
            dimensions: this.extractDimensions(),
            panels: this.extractPanels(),
            sections: this.extractSections(),
            stats: this.extractStats()
        };
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å —Ä–∞–∑–º–µ—Ä—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
     */
    extractDimensions() {
        if (!this.cabinet || !this.cabinet.dimensions) return null;
        
        const dims = this.cabinet.dimensions;
        return {
            width: dims.width,
            height: dims.height,
            depth: dims.depth,
            baseHeight: dims.baseHeight
        };
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å –ø–∞–Ω–µ–ª–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
     */
    extractPanels() {
        if (!this.cabinet || !this.cabinet.getPanels) return [];
        
        try {
            const panels = this.cabinet.getPanels();
            return panels.map(panel => ({
                id: panel.id,
                name: panel.name,
                type: panel.panelType,
                material: panel.material ? panel.material.name : 'Unknown',
                dimensions: panel.dimensions ? {
                    width: panel.dimensions.width,
                    height: panel.dimensions.height,
                    thickness: panel.dimensions.thickness
                } : null,
                position: panel.position ? {
                    x: panel.position.x,
                    y: panel.position.y,
                    z: panel.position.z
                } : null
            }));
        } catch (error) {
            console.error('Error extracting panels:', error);
            return [];
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å —Å–µ–∫—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
     */
    extractSections() {
        if (!this.cabinet || !this.cabinet.getSections) return [];
        
        try {
            const sections = this.cabinet.getSections();
            return sections.map(section => ({
                id: section.id,
                bounds: section.bounds ? {
                    x: section.bounds.x,
                    y: section.bounds.y,
                    width: section.bounds.width,
                    height: section.bounds.height
                } : null,
                isEmpty: section.isEmpty
            }));
        } catch (error) {
            console.error('Error extracting sections:', error);
            return [];
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    extractStats() {
        if (!this.cabinet || !this.cabinet.getStats) {
            return {
                panelsCount: 0,
                sectionsCount: 0,
                volume: 0
            };
        }
        
        try {
            const stats = this.cabinet.getStats();
            const dims = this.extractDimensions();
            
            return {
                panelsCount: stats.panelsCount || 0,
                sectionsCount: stats.sectionsCount || 0,
                volume: dims ? (dims.width * dims.height * dims.depth) / 1000000000 : 0
            };
        } catch (error) {
            console.error('Error extracting stats:', error);
            return {
                panelsCount: 0,
                sectionsCount: 0,
                volume: 0
            };
        }
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–∫—É –≤ —Å–µ–∫—Ü–∏—é
     * @param {string} sectionId - ID —Å–µ–∫—Ü–∏–∏
     * @param {number} position - –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª–∫–∏
     */
    addShelf(sectionId, position) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —è–¥—Ä–æ
        throw new Error('Not implemented yet');
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–π–∫—É –≤ —Å–µ–∫—Ü–∏—é
     * @param {string} sectionId - ID —Å–µ–∫—Ü–∏–∏
     * @param {number} position - –ø–æ–∑–∏—Ü–∏—è —Å—Ç–æ–π–∫–∏
     */
    addDivider(sectionId, position) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —è–¥—Ä–æ
        throw new Error('Not implemented yet');
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∫–∞—Ñ–∞
     */
    validateCabinetParams(params) {
        const errors = [];
        
        if (!params.width || params.width < 400 || params.width > 2000) {
            errors.push('–®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 400 –¥–æ 2000 –º–º');
        }
        
        if (!params.height || params.height < 600 || params.height > 3000) {
            errors.push('–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 600 –¥–æ 3000 –º–º');
        }
        
        if (!params.depth || params.depth < 300 || params.depth > 800) {
            errors.push('–ì–ª—É–±–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 300 –¥–æ 800 –º–º');
        }
        
        if (params.baseHeight && (params.baseHeight < 60 || params.baseHeight > 200)) {
            errors.push('–í—ã—Å–æ—Ç–∞ —Ü–æ–∫–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 60 –¥–æ 200 –º–º');
        }
        
        if (errors.length > 0) {
            throw new Error(errors.join('; '));
        }
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —à–∫–∞—Ñ–∞
     */
    exportToJSON() {
        const data = this.getCabinetData();
        if (!data) {
            throw new Error('No cabinet to export');
        }
        
        return {
            version: '1.0',
            timestamp: new Date().toISOString(),
            cabinet: data
        };
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
     */
    getSystemInfo() {
        if (!this.system) return null;
        
        return this.system.getStats();
    }
}